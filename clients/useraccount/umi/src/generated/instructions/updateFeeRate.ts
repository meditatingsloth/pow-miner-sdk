/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type UpdateFeeRateInstructionAccounts = {
  master?: PublicKey | Pda;
  authority?: Signer;
};

// Data.
export type UpdateFeeRateInstructionData = {
  discriminator: Uint8Array;
  newFeeRate: number;
};

export type UpdateFeeRateInstructionDataArgs = { newFeeRate: number };

export function getUpdateFeeRateInstructionDataSerializer(): Serializer<
  UpdateFeeRateInstructionDataArgs,
  UpdateFeeRateInstructionData
> {
  return mapSerializer<
    UpdateFeeRateInstructionDataArgs,
    any,
    UpdateFeeRateInstructionData
  >(
    struct<UpdateFeeRateInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['newFeeRate', u8()],
      ],
      { description: 'UpdateFeeRateInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([195, 241, 226, 216, 102, 1, 5, 122]),
    })
  ) as Serializer<
    UpdateFeeRateInstructionDataArgs,
    UpdateFeeRateInstructionData
  >;
}

// Args.
export type UpdateFeeRateInstructionArgs = UpdateFeeRateInstructionDataArgs;

// Instruction.
export function updateFeeRate(
  context: Pick<Context, 'eddsa' | 'identity' | 'programs'>,
  input: UpdateFeeRateInstructionAccounts & UpdateFeeRateInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'useraccount',
    'KoNT93eGXFcQJxZQqBvrBLQQCcxEPhKrmZoqFNmxGjk'
  );

  // Accounts.
  const resolvedAccounts = {
    master: {
      index: 0,
      isWritable: true as boolean,
      value: input.master ?? null,
    },
    authority: {
      index: 1,
      isWritable: false as boolean,
      value: input.authority ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: UpdateFeeRateInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.master.value) {
    resolvedAccounts.master.value = context.eddsa.findPda(programId, [
      bytes().serialize(new Uint8Array([109, 97, 115, 116, 101, 114])),
    ]);
  }
  if (!resolvedAccounts.authority.value) {
    resolvedAccounts.authority.value = context.identity;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getUpdateFeeRateInstructionDataSerializer().serialize(
    resolvedArgs as UpdateFeeRateInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
