/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { findConfigPda } from '../pdas';

export const CONFIG_DISCRIMINATOR = new Uint8Array([
  155, 12, 170, 224, 30, 250, 204, 130,
]);

export function getConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CONFIG_DISCRIMINATOR);
}

export type Config = {
  discriminator: ReadonlyUint8Array;
  admin: Address;
  mint: Address;
  totalMinted: bigint;
  rewardDivisor: bigint;
  blocksSinceAdjustment: bigint;
  halvingEpoch: bigint;
  halvingIntervalSecs: bigint;
  lastAdjustmentTs: bigint;
  targetBlockTime: bigint;
  baseCooldownSecs: bigint;
  maxRewardAllowed: bigint;
  maxDailyReward: bigint;
  totalMinedSinceAdjustment: bigint;
  adjustmentPeriodSecs: bigint;
  baseReward: bigint;
  currentHashrate: bigint;
  mintAuthBump: number;
  minDifficulty: number;
  bump: number;
  padding: ReadonlyUint8Array;
};

export type ConfigArgs = {
  admin: Address;
  mint: Address;
  totalMinted: number | bigint;
  rewardDivisor: number | bigint;
  blocksSinceAdjustment: number | bigint;
  halvingEpoch: number | bigint;
  halvingIntervalSecs: number | bigint;
  lastAdjustmentTs: number | bigint;
  targetBlockTime: number | bigint;
  baseCooldownSecs: number | bigint;
  maxRewardAllowed: number | bigint;
  maxDailyReward: number | bigint;
  totalMinedSinceAdjustment: number | bigint;
  adjustmentPeriodSecs: number | bigint;
  baseReward: number | bigint;
  currentHashrate: number | bigint;
  mintAuthBump: number;
  minDifficulty: number;
  bump: number;
  padding: ReadonlyUint8Array;
};

export function getConfigEncoder(): Encoder<ConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['admin', getAddressEncoder()],
      ['mint', getAddressEncoder()],
      ['totalMinted', getU64Encoder()],
      ['rewardDivisor', getU64Encoder()],
      ['blocksSinceAdjustment', getU64Encoder()],
      ['halvingEpoch', getI64Encoder()],
      ['halvingIntervalSecs', getI64Encoder()],
      ['lastAdjustmentTs', getI64Encoder()],
      ['targetBlockTime', getI64Encoder()],
      ['baseCooldownSecs', getI64Encoder()],
      ['maxRewardAllowed', getU64Encoder()],
      ['maxDailyReward', getU64Encoder()],
      ['totalMinedSinceAdjustment', getU64Encoder()],
      ['adjustmentPeriodSecs', getI64Encoder()],
      ['baseReward', getU64Encoder()],
      ['currentHashrate', getU64Encoder()],
      ['mintAuthBump', getU8Encoder()],
      ['minDifficulty', getU8Encoder()],
      ['bump', getU8Encoder()],
      ['padding', fixEncoderSize(getBytesEncoder(), 5)],
    ]),
    (value) => ({ ...value, discriminator: CONFIG_DISCRIMINATOR })
  );
}

export function getConfigDecoder(): Decoder<Config> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['admin', getAddressDecoder()],
    ['mint', getAddressDecoder()],
    ['totalMinted', getU64Decoder()],
    ['rewardDivisor', getU64Decoder()],
    ['blocksSinceAdjustment', getU64Decoder()],
    ['halvingEpoch', getI64Decoder()],
    ['halvingIntervalSecs', getI64Decoder()],
    ['lastAdjustmentTs', getI64Decoder()],
    ['targetBlockTime', getI64Decoder()],
    ['baseCooldownSecs', getI64Decoder()],
    ['maxRewardAllowed', getU64Decoder()],
    ['maxDailyReward', getU64Decoder()],
    ['totalMinedSinceAdjustment', getU64Decoder()],
    ['adjustmentPeriodSecs', getI64Decoder()],
    ['baseReward', getU64Decoder()],
    ['currentHashrate', getU64Decoder()],
    ['mintAuthBump', getU8Decoder()],
    ['minDifficulty', getU8Decoder()],
    ['bump', getU8Decoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 5)],
  ]);
}

export function getConfigCodec(): Codec<ConfigArgs, Config> {
  return combineCodec(getConfigEncoder(), getConfigDecoder());
}

export function decodeConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Config, TAddress>;
export function decodeConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Config, TAddress>;
export function decodeConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Config, TAddress> | MaybeAccount<Config, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getConfigDecoder()
  );
}

export async function fetchConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Config, TAddress>> {
  const maybeAccount = await fetchMaybeConfig(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Config, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeConfig(maybeAccount);
}

export async function fetchAllConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Config>[]> {
  const maybeAccounts = await fetchAllMaybeConfig(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Config>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeConfig(maybeAccount));
}

export function getConfigSize(): number {
  return 192;
}

export async function fetchConfigFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<Config>> {
  const maybeAccount = await fetchMaybeConfigFromSeeds(rpc, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeConfigFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<Config>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findConfigPda({ programAddress });
  return await fetchMaybeConfig(rpc, address, fetchConfig);
}
