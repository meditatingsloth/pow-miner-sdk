/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const TOKEN_POOL_DISCRIMINATOR = new Uint8Array([
  103, 51, 150, 210, 226, 131, 104, 33,
]);

export function getTokenPoolDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(TOKEN_POOL_DISCRIMINATOR);
}

export type TokenPool = {
  discriminator: ReadonlyUint8Array;
  owner: Address;
  mint: Address;
  tokenAccount: Address;
  tokenName: ReadonlyUint8Array;
  createdAt: bigint;
  lastUpdated: bigint;
};

export type TokenPoolArgs = {
  owner: Address;
  mint: Address;
  tokenAccount: Address;
  tokenName: ReadonlyUint8Array;
  createdAt: number | bigint;
  lastUpdated: number | bigint;
};

export function getTokenPoolEncoder(): Encoder<TokenPoolArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['owner', getAddressEncoder()],
      ['mint', getAddressEncoder()],
      ['tokenAccount', getAddressEncoder()],
      ['tokenName', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
      ['createdAt', getI64Encoder()],
      ['lastUpdated', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: TOKEN_POOL_DISCRIMINATOR })
  );
}

export function getTokenPoolDecoder(): Decoder<TokenPool> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['owner', getAddressDecoder()],
    ['mint', getAddressDecoder()],
    ['tokenAccount', getAddressDecoder()],
    ['tokenName', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
    ['createdAt', getI64Decoder()],
    ['lastUpdated', getI64Decoder()],
  ]);
}

export function getTokenPoolCodec(): Codec<TokenPoolArgs, TokenPool> {
  return combineCodec(getTokenPoolEncoder(), getTokenPoolDecoder());
}

export function decodeTokenPool<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<TokenPool, TAddress>;
export function decodeTokenPool<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<TokenPool, TAddress>;
export function decodeTokenPool<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<TokenPool, TAddress> | MaybeAccount<TokenPool, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getTokenPoolDecoder()
  );
}

export async function fetchTokenPool<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<TokenPool, TAddress>> {
  const maybeAccount = await fetchMaybeTokenPool(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeTokenPool<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<TokenPool, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeTokenPool(maybeAccount);
}

export async function fetchAllTokenPool(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<TokenPool>[]> {
  const maybeAccounts = await fetchAllMaybeTokenPool(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeTokenPool(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<TokenPool>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeTokenPool(maybeAccount));
}
