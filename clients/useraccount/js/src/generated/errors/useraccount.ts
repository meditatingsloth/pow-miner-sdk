/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { USERACCOUNT_PROGRAM_ADDRESS } from '../programs';

/** StringTooLong: String too long */
export const USERACCOUNT_ERROR__STRING_TOO_LONG = 0x1770; // 6000
/** StringTooShort: String too short */
export const USERACCOUNT_ERROR__STRING_TOO_SHORT = 0x1771; // 6001
/** DataSizeExceeded: Data size exceeded */
export const USERACCOUNT_ERROR__DATA_SIZE_EXCEEDED = 0x1772; // 6002
/** Unauthorized: Unauthorized */
export const USERACCOUNT_ERROR__UNAUTHORIZED = 0x1773; // 6003
/** AmountTooLow: Amount too low */
export const USERACCOUNT_ERROR__AMOUNT_TOO_LOW = 0x1774; // 6004
/** AmountTooHigh: Amount too high */
export const USERACCOUNT_ERROR__AMOUNT_TOO_HIGH = 0x1775; // 6005
/** InsufficientFunds: Insufficient funds */
export const USERACCOUNT_ERROR__INSUFFICIENT_FUNDS = 0x1776; // 6006
/** InsufficientFundsForRent: Ikke nok lamports for å beholde kontoen rentefritatt. Du må beholde en minimumssaldo. */
export const USERACCOUNT_ERROR__INSUFFICIENT_FUNDS_FOR_RENT = 0x1777; // 6007
/** EscrowAlreadyExists: Brukeren har allerede en aktiv escrow-konto. Kanseller den eksisterende før du oppretter en ny. */
export const USERACCOUNT_ERROR__ESCROW_ALREADY_EXISTS = 0x1778; // 6008
/** InvalidMasterAccount: Ugyldig master-konto: månedspris må være større enn 0 */
export const USERACCOUNT_ERROR__INVALID_MASTER_ACCOUNT = 0x1779; // 6009
/** InvalidFeeProgramAccount: Ugyldig fee_program konto */
export const USERACCOUNT_ERROR__INVALID_FEE_PROGRAM_ACCOUNT = 0x177a; // 6010

export type UseraccountError =
  | typeof USERACCOUNT_ERROR__AMOUNT_TOO_HIGH
  | typeof USERACCOUNT_ERROR__AMOUNT_TOO_LOW
  | typeof USERACCOUNT_ERROR__DATA_SIZE_EXCEEDED
  | typeof USERACCOUNT_ERROR__ESCROW_ALREADY_EXISTS
  | typeof USERACCOUNT_ERROR__INSUFFICIENT_FUNDS
  | typeof USERACCOUNT_ERROR__INSUFFICIENT_FUNDS_FOR_RENT
  | typeof USERACCOUNT_ERROR__INVALID_FEE_PROGRAM_ACCOUNT
  | typeof USERACCOUNT_ERROR__INVALID_MASTER_ACCOUNT
  | typeof USERACCOUNT_ERROR__STRING_TOO_LONG
  | typeof USERACCOUNT_ERROR__STRING_TOO_SHORT
  | typeof USERACCOUNT_ERROR__UNAUTHORIZED;

let useraccountErrorMessages: Record<UseraccountError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  useraccountErrorMessages = {
    [USERACCOUNT_ERROR__AMOUNT_TOO_HIGH]: `Amount too high`,
    [USERACCOUNT_ERROR__AMOUNT_TOO_LOW]: `Amount too low`,
    [USERACCOUNT_ERROR__DATA_SIZE_EXCEEDED]: `Data size exceeded`,
    [USERACCOUNT_ERROR__ESCROW_ALREADY_EXISTS]: `Brukeren har allerede en aktiv escrow-konto. Kanseller den eksisterende før du oppretter en ny.`,
    [USERACCOUNT_ERROR__INSUFFICIENT_FUNDS]: `Insufficient funds`,
    [USERACCOUNT_ERROR__INSUFFICIENT_FUNDS_FOR_RENT]: `Ikke nok lamports for å beholde kontoen rentefritatt. Du må beholde en minimumssaldo.`,
    [USERACCOUNT_ERROR__INVALID_FEE_PROGRAM_ACCOUNT]: `Ugyldig fee_program konto`,
    [USERACCOUNT_ERROR__INVALID_MASTER_ACCOUNT]: `Ugyldig master-konto: månedspris må være større enn 0`,
    [USERACCOUNT_ERROR__STRING_TOO_LONG]: `String too long`,
    [USERACCOUNT_ERROR__STRING_TOO_SHORT]: `String too short`,
    [USERACCOUNT_ERROR__UNAUTHORIZED]: `Unauthorized`,
  };
}

export function getUseraccountErrorMessage(code: UseraccountError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (useraccountErrorMessages as Record<UseraccountError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isUseraccountError<TProgramErrorCode extends UseraccountError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    USERACCOUNT_PROGRAM_ADDRESS,
    code
  );
}
