/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { findConfigPda } from '../pdas';
import { POW_MINER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SET_PARAMS_DISCRIMINATOR = new Uint8Array([
  27, 234, 178, 52, 147, 2, 187, 141,
]);

export function getSetParamsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(SET_PARAMS_DISCRIMINATOR);
}

export type SetParamsInstruction<
  TProgram extends string = typeof POW_MINER_PROGRAM_ADDRESS,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      ...TRemainingAccounts,
    ]
  >;

export type SetParamsInstructionData = {
  discriminator: ReadonlyUint8Array;
  minDifficulty: number;
  baseCooldownSecs: bigint;
  rewardDivisor: bigint;
  maxRewardAllowed: bigint;
  maxDailyReward: bigint;
  baseReward: bigint;
};

export type SetParamsInstructionDataArgs = {
  minDifficulty: number;
  baseCooldownSecs: number | bigint;
  rewardDivisor: number | bigint;
  maxRewardAllowed: number | bigint;
  maxDailyReward: number | bigint;
  baseReward: number | bigint;
};

export function getSetParamsInstructionDataEncoder(): Encoder<SetParamsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['minDifficulty', getU8Encoder()],
      ['baseCooldownSecs', getI64Encoder()],
      ['rewardDivisor', getU64Encoder()],
      ['maxRewardAllowed', getU64Encoder()],
      ['maxDailyReward', getU64Encoder()],
      ['baseReward', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: SET_PARAMS_DISCRIMINATOR })
  );
}

export function getSetParamsInstructionDataDecoder(): Decoder<SetParamsInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['minDifficulty', getU8Decoder()],
    ['baseCooldownSecs', getI64Decoder()],
    ['rewardDivisor', getU64Decoder()],
    ['maxRewardAllowed', getU64Decoder()],
    ['maxDailyReward', getU64Decoder()],
    ['baseReward', getU64Decoder()],
  ]);
}

export function getSetParamsInstructionDataCodec(): Codec<
  SetParamsInstructionDataArgs,
  SetParamsInstructionData
> {
  return combineCodec(
    getSetParamsInstructionDataEncoder(),
    getSetParamsInstructionDataDecoder()
  );
}

export type SetParamsAsyncInput<
  TAccountConfig extends string = string,
  TAccountAdmin extends string = string,
> = {
  config?: Address<TAccountConfig>;
  admin: TransactionSigner<TAccountAdmin>;
  minDifficulty: SetParamsInstructionDataArgs['minDifficulty'];
  baseCooldownSecs: SetParamsInstructionDataArgs['baseCooldownSecs'];
  rewardDivisor: SetParamsInstructionDataArgs['rewardDivisor'];
  maxRewardAllowed: SetParamsInstructionDataArgs['maxRewardAllowed'];
  maxDailyReward: SetParamsInstructionDataArgs['maxDailyReward'];
  baseReward: SetParamsInstructionDataArgs['baseReward'];
};

export async function getSetParamsInstructionAsync<
  TAccountConfig extends string,
  TAccountAdmin extends string,
  TProgramAddress extends Address = typeof POW_MINER_PROGRAM_ADDRESS,
>(
  input: SetParamsAsyncInput<TAccountConfig, TAccountAdmin>,
  config?: { programAddress?: TProgramAddress }
): Promise<
  SetParamsInstruction<TProgramAddress, TAccountConfig, TAccountAdmin>
> {
  // Program address.
  const programAddress = config?.programAddress ?? POW_MINER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.config.value) {
    accounts.config.value = await findConfigPda();
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.config), getAccountMeta(accounts.admin)],
    programAddress,
    data: getSetParamsInstructionDataEncoder().encode(
      args as SetParamsInstructionDataArgs
    ),
  } as SetParamsInstruction<TProgramAddress, TAccountConfig, TAccountAdmin>;

  return instruction;
}

export type SetParamsInput<
  TAccountConfig extends string = string,
  TAccountAdmin extends string = string,
> = {
  config: Address<TAccountConfig>;
  admin: TransactionSigner<TAccountAdmin>;
  minDifficulty: SetParamsInstructionDataArgs['minDifficulty'];
  baseCooldownSecs: SetParamsInstructionDataArgs['baseCooldownSecs'];
  rewardDivisor: SetParamsInstructionDataArgs['rewardDivisor'];
  maxRewardAllowed: SetParamsInstructionDataArgs['maxRewardAllowed'];
  maxDailyReward: SetParamsInstructionDataArgs['maxDailyReward'];
  baseReward: SetParamsInstructionDataArgs['baseReward'];
};

export function getSetParamsInstruction<
  TAccountConfig extends string,
  TAccountAdmin extends string,
  TProgramAddress extends Address = typeof POW_MINER_PROGRAM_ADDRESS,
>(
  input: SetParamsInput<TAccountConfig, TAccountAdmin>,
  config?: { programAddress?: TProgramAddress }
): SetParamsInstruction<TProgramAddress, TAccountConfig, TAccountAdmin> {
  // Program address.
  const programAddress = config?.programAddress ?? POW_MINER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.config), getAccountMeta(accounts.admin)],
    programAddress,
    data: getSetParamsInstructionDataEncoder().encode(
      args as SetParamsInstructionDataArgs
    ),
  } as SetParamsInstruction<TProgramAddress, TAccountConfig, TAccountAdmin>;

  return instruction;
}

export type ParsedSetParamsInstruction<
  TProgram extends string = typeof POW_MINER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    admin: TAccountMetas[1];
  };
  data: SetParamsInstructionData;
};

export function parseSetParamsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSetParamsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      admin: getNextAccount(),
    },
    data: getSetParamsInstructionDataDecoder().decode(instruction.data),
  };
}
