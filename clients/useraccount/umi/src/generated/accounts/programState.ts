/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  string,
  struct,
  u32,
  u64,
} from '@metaplex-foundation/umi/serializers';

export type ProgramState = Account<ProgramStateAccountData>;

export type ProgramStateAccountData = {
  discriminator: Uint8Array;
  nextUserId: number;
  totalSubscriptions: number;
  totalEscrowBalance: bigint;
  totalFeesCollected: bigint;
  totalRecipientFees: bigint;
};

export type ProgramStateAccountDataArgs = {
  nextUserId: number;
  totalSubscriptions: number;
  totalEscrowBalance: number | bigint;
  totalFeesCollected: number | bigint;
  totalRecipientFees: number | bigint;
};

export function getProgramStateAccountDataSerializer(): Serializer<
  ProgramStateAccountDataArgs,
  ProgramStateAccountData
> {
  return mapSerializer<
    ProgramStateAccountDataArgs,
    any,
    ProgramStateAccountData
  >(
    struct<ProgramStateAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['nextUserId', u32()],
        ['totalSubscriptions', u32()],
        ['totalEscrowBalance', u64()],
        ['totalFeesCollected', u64()],
        ['totalRecipientFees', u64()],
      ],
      { description: 'ProgramStateAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([77, 209, 137, 229, 149, 67, 167, 230]),
    })
  ) as Serializer<ProgramStateAccountDataArgs, ProgramStateAccountData>;
}

export function deserializeProgramState(rawAccount: RpcAccount): ProgramState {
  return deserializeAccount(rawAccount, getProgramStateAccountDataSerializer());
}

export async function fetchProgramState(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<ProgramState> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'ProgramState');
  return deserializeProgramState(maybeAccount);
}

export async function safeFetchProgramState(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<ProgramState | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeProgramState(maybeAccount) : null;
}

export async function fetchAllProgramState(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<ProgramState[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'ProgramState');
    return deserializeProgramState(maybeAccount);
  });
}

export async function safeFetchAllProgramState(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<ProgramState[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeProgramState(maybeAccount as RpcAccount));
}

export function getProgramStateGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'useraccount',
    'KoNT93eGXFcQJxZQqBvrBLQQCcxEPhKrmZoqFNmxGjk'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      nextUserId: number;
      totalSubscriptions: number;
      totalEscrowBalance: number | bigint;
      totalFeesCollected: number | bigint;
      totalRecipientFees: number | bigint;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      nextUserId: [8, u32()],
      totalSubscriptions: [12, u32()],
      totalEscrowBalance: [16, u64()],
      totalFeesCollected: [24, u64()],
      totalRecipientFees: [32, u64()],
    })
    .deserializeUsing<ProgramState>((account) =>
      deserializeProgramState(account)
    )
    .whereField(
      'discriminator',
      new Uint8Array([77, 209, 137, 229, 149, 67, 167, 230])
    );
}

export function getProgramStateSize(): number {
  return 40;
}

export function findProgramStatePda(
  context: Pick<Context, 'eddsa' | 'programs'>
): Pda {
  const programId = context.programs.getPublicKey(
    'useraccount',
    'KoNT93eGXFcQJxZQqBvrBLQQCcxEPhKrmZoqFNmxGjk'
  );
  return context.eddsa.findPda(programId, [
    string({ size: 'variable' }).serialize('program_state'),
  ]);
}

export async function fetchProgramStateFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  options?: RpcGetAccountOptions
): Promise<ProgramState> {
  return fetchProgramState(context, findProgramStatePda(context), options);
}

export async function safeFetchProgramStateFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  options?: RpcGetAccountOptions
): Promise<ProgramState | null> {
  return safeFetchProgramState(context, findProgramStatePda(context), options);
}
