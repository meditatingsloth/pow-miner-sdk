/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  i64,
  mapSerializer,
  option,
  publicKey as publicKeySerializer,
  struct,
  u32,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type User = Account<UserAccountData>;

export type UserAccountData = {
  discriminator: Uint8Array;
  createdAt: bigint;
  lastUpdated: bigint;
  name: Uint8Array;
  description: Uint8Array;
  tokenCount: number;
  authority: PublicKey;
  escrow: Option<PublicKey>;
};

export type UserAccountDataArgs = {
  createdAt: number | bigint;
  lastUpdated: number | bigint;
  name: Uint8Array;
  description: Uint8Array;
  tokenCount: number;
  authority: PublicKey;
  escrow: OptionOrNullable<PublicKey>;
};

export function getUserAccountDataSerializer(): Serializer<
  UserAccountDataArgs,
  UserAccountData
> {
  return mapSerializer<UserAccountDataArgs, any, UserAccountData>(
    struct<UserAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['createdAt', i64()],
        ['lastUpdated', i64()],
        ['name', bytes({ size: u32() })],
        ['description', bytes({ size: u32() })],
        ['tokenCount', u8()],
        ['authority', publicKeySerializer()],
        ['escrow', option(publicKeySerializer())],
      ],
      { description: 'UserAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([159, 117, 95, 227, 239, 151, 58, 236]),
    })
  ) as Serializer<UserAccountDataArgs, UserAccountData>;
}

export function deserializeUser(rawAccount: RpcAccount): User {
  return deserializeAccount(rawAccount, getUserAccountDataSerializer());
}

export async function fetchUser(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<User> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'User');
  return deserializeUser(maybeAccount);
}

export async function safeFetchUser(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<User | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeUser(maybeAccount) : null;
}

export async function fetchAllUser(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<User[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'User');
    return deserializeUser(maybeAccount);
  });
}

export async function safeFetchAllUser(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<User[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeUser(maybeAccount as RpcAccount));
}

export function getUserGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
  const programId = context.programs.getPublicKey(
    'useraccount',
    'KoNT93eGXFcQJxZQqBvrBLQQCcxEPhKrmZoqFNmxGjk'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      createdAt: number | bigint;
      lastUpdated: number | bigint;
      name: Uint8Array;
      description: Uint8Array;
      tokenCount: number;
      authority: PublicKey;
      escrow: OptionOrNullable<PublicKey>;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      createdAt: [8, i64()],
      lastUpdated: [16, i64()],
      name: [24, bytes({ size: u32() })],
      description: [null, bytes({ size: u32() })],
      tokenCount: [null, u8()],
      authority: [null, publicKeySerializer()],
      escrow: [null, option(publicKeySerializer())],
    })
    .deserializeUsing<User>((account) => deserializeUser(account))
    .whereField(
      'discriminator',
      new Uint8Array([159, 117, 95, 227, 239, 151, 58, 236])
    );
}

export function findUserPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
  seeds: {
    authority: PublicKey;
  }
): Pda {
  const programId = context.programs.getPublicKey(
    'useraccount',
    'KoNT93eGXFcQJxZQqBvrBLQQCcxEPhKrmZoqFNmxGjk'
  );
  return context.eddsa.findPda(programId, [
    bytes().serialize(new Uint8Array([117, 115, 101, 114])),
    publicKeySerializer().serialize(seeds.authority),
  ]);
}

export async function fetchUserFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findUserPda>[1],
  options?: RpcGetAccountOptions
): Promise<User> {
  return fetchUser(context, findUserPda(context, seeds), options);
}

export async function safeFetchUserFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findUserPda>[1],
  options?: RpcGetAccountOptions
): Promise<User | null> {
  return safeFetchUser(context, findUserPda(context, seeds), options);
}
