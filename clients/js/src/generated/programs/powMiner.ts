/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedClaimInstruction,
  type ParsedCreateTokenInstruction,
  type ParsedInitializeConfigInstruction,
  type ParsedInitializeInstruction,
  type ParsedMineInstruction,
  type ParsedSetParamsInstruction,
  type ParsedVerifyProofInstruction,
} from '../instructions';

export const POW_MINER_PROGRAM_ADDRESS =
  'BGLDbLHXzZEKvZX2PAkvSChWtZYySZ16Drj6NX247AfY' as Address<'BGLDbLHXzZEKvZX2PAkvSChWtZYySZ16Drj6NX247AfY'>;

export enum PowMinerAccount {
  Config,
  Proof,
}

export function identifyPowMinerAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): PowMinerAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([155, 12, 170, 224, 30, 250, 204, 130])
      ),
      0
    )
  ) {
    return PowMinerAccount.Config;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([163, 35, 13, 71, 15, 128, 63, 82])
      ),
      0
    )
  ) {
    return PowMinerAccount.Proof;
  }
  throw new Error(
    'The provided account could not be identified as a powMiner account.'
  );
}

export enum PowMinerInstruction {
  Claim,
  CreateToken,
  Initialize,
  InitializeConfig,
  Mine,
  SetParams,
  VerifyProof,
}

export function identifyPowMinerInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): PowMinerInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([62, 198, 214, 193, 213, 159, 108, 210])
      ),
      0
    )
  ) {
    return PowMinerInstruction.Claim;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([84, 52, 204, 228, 24, 140, 234, 75])
      ),
      0
    )
  ) {
    return PowMinerInstruction.CreateToken;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return PowMinerInstruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([208, 127, 21, 1, 194, 190, 196, 70])
      ),
      0
    )
  ) {
    return PowMinerInstruction.InitializeConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([59, 22, 178, 213, 139, 197, 160, 196])
      ),
      0
    )
  ) {
    return PowMinerInstruction.Mine;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([27, 234, 178, 52, 147, 2, 187, 141])
      ),
      0
    )
  ) {
    return PowMinerInstruction.SetParams;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([217, 211, 191, 110, 144, 13, 186, 98])
      ),
      0
    )
  ) {
    return PowMinerInstruction.VerifyProof;
  }
  throw new Error(
    'The provided instruction could not be identified as a powMiner instruction.'
  );
}

export type ParsedPowMinerInstruction<
  TProgram extends string = 'BGLDbLHXzZEKvZX2PAkvSChWtZYySZ16Drj6NX247AfY',
> =
  | ({
      instructionType: PowMinerInstruction.Claim;
    } & ParsedClaimInstruction<TProgram>)
  | ({
      instructionType: PowMinerInstruction.CreateToken;
    } & ParsedCreateTokenInstruction<TProgram>)
  | ({
      instructionType: PowMinerInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: PowMinerInstruction.InitializeConfig;
    } & ParsedInitializeConfigInstruction<TProgram>)
  | ({
      instructionType: PowMinerInstruction.Mine;
    } & ParsedMineInstruction<TProgram>)
  | ({
      instructionType: PowMinerInstruction.SetParams;
    } & ParsedSetParamsInstruction<TProgram>)
  | ({
      instructionType: PowMinerInstruction.VerifyProof;
    } & ParsedVerifyProofInstruction<TProgram>);
