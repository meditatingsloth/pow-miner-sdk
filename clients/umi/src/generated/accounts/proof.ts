/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  i64,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type Proof = Account<ProofAccountData>;

export type ProofAccountData = {
  discriminator: Uint8Array;
  challenge: Uint8Array;
  balance: bigint;
  lastMinedAt: bigint;
  nextMineAt: bigint;
  dailyTotal: bigint;
  lastDailyReset: bigint;
  createdAtSlot: bigint;
  challengeSlot: bigint;
  totalHashes: bigint;
  bump: number;
  padding: Uint8Array;
};

export type ProofAccountDataArgs = {
  challenge: Uint8Array;
  balance: number | bigint;
  lastMinedAt: number | bigint;
  nextMineAt: number | bigint;
  dailyTotal: number | bigint;
  lastDailyReset: number | bigint;
  createdAtSlot: number | bigint;
  challengeSlot: number | bigint;
  totalHashes: number | bigint;
  bump: number;
  padding: Uint8Array;
};

export function getProofAccountDataSerializer(): Serializer<
  ProofAccountDataArgs,
  ProofAccountData
> {
  return mapSerializer<ProofAccountDataArgs, any, ProofAccountData>(
    struct<ProofAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['challenge', bytes({ size: 32 })],
        ['balance', u64()],
        ['lastMinedAt', i64()],
        ['nextMineAt', i64()],
        ['dailyTotal', u64()],
        ['lastDailyReset', i64()],
        ['createdAtSlot', u64()],
        ['challengeSlot', u64()],
        ['totalHashes', u64()],
        ['bump', u8()],
        ['padding', bytes({ size: 7 })],
      ],
      { description: 'ProofAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([163, 35, 13, 71, 15, 128, 63, 82]),
    })
  ) as Serializer<ProofAccountDataArgs, ProofAccountData>;
}

export function deserializeProof(rawAccount: RpcAccount): Proof {
  return deserializeAccount(rawAccount, getProofAccountDataSerializer());
}

export async function fetchProof(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Proof> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Proof');
  return deserializeProof(maybeAccount);
}

export async function safeFetchProof(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Proof | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeProof(maybeAccount) : null;
}

export async function fetchAllProof(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Proof[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Proof');
    return deserializeProof(maybeAccount);
  });
}

export async function safeFetchAllProof(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Proof[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeProof(maybeAccount as RpcAccount));
}

export function getProofGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>) {
  const programId = context.programs.getPublicKey(
    'powMiner',
    'BGLDbLHXzZEKvZX2PAkvSChWtZYySZ16Drj6NX247AfY'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      challenge: Uint8Array;
      balance: number | bigint;
      lastMinedAt: number | bigint;
      nextMineAt: number | bigint;
      dailyTotal: number | bigint;
      lastDailyReset: number | bigint;
      createdAtSlot: number | bigint;
      challengeSlot: number | bigint;
      totalHashes: number | bigint;
      bump: number;
      padding: Uint8Array;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      challenge: [8, bytes({ size: 32 })],
      balance: [40, u64()],
      lastMinedAt: [48, i64()],
      nextMineAt: [56, i64()],
      dailyTotal: [64, u64()],
      lastDailyReset: [72, i64()],
      createdAtSlot: [80, u64()],
      challengeSlot: [88, u64()],
      totalHashes: [96, u64()],
      bump: [104, u8()],
      padding: [105, bytes({ size: 7 })],
    })
    .deserializeUsing<Proof>((account) => deserializeProof(account))
    .whereField(
      'discriminator',
      new Uint8Array([163, 35, 13, 71, 15, 128, 63, 82])
    );
}

export function getProofSize(): number {
  return 112;
}

export function findProofPda(
  context: Pick<Context, 'eddsa' | 'programs'>,
  seeds: {
    user: PublicKey;
  }
): Pda {
  const programId = context.programs.getPublicKey(
    'powMiner',
    'BGLDbLHXzZEKvZX2PAkvSChWtZYySZ16Drj6NX247AfY'
  );
  return context.eddsa.findPda(programId, [
    string({ size: 'variable' }).serialize('proof'),
    publicKeySerializer().serialize(seeds.user),
  ]);
}

export async function fetchProofFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findProofPda>[1],
  options?: RpcGetAccountOptions
): Promise<Proof> {
  return fetchProof(context, findProofPda(context, seeds), options);
}

export async function safeFetchProofFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  seeds: Parameters<typeof findProofPda>[1],
  options?: RpcGetAccountOptions
): Promise<Proof | null> {
  return safeFetchProof(context, findProofPda(context, seeds), options);
}
