/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { findProgramStatePda } from '../pdas';
import { USERACCOUNT_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const DEPOSIT_TO_ESCROW_DISCRIMINATOR = new Uint8Array([
  246, 134, 57, 199, 116, 101, 68, 224,
]);

export function getDepositToEscrowDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DEPOSIT_TO_ESCROW_DISCRIMINATOR
  );
}

export type DepositToEscrowInstruction<
  TProgram extends string = typeof USERACCOUNT_PROGRAM_ADDRESS,
  TAccountUser extends string | IAccountMeta<string> = string,
  TAccountEscrow extends string | IAccountMeta<string> = string,
  TAccountMaster extends string | IAccountMeta<string> = string,
  TAccountProgramState extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountUser extends string
        ? WritableAccount<TAccountUser>
        : TAccountUser,
      TAccountEscrow extends string
        ? WritableAccount<TAccountEscrow>
        : TAccountEscrow,
      TAccountMaster extends string
        ? ReadonlyAccount<TAccountMaster>
        : TAccountMaster,
      TAccountProgramState extends string
        ? WritableAccount<TAccountProgramState>
        : TAccountProgramState,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type DepositToEscrowInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type DepositToEscrowInstructionDataArgs = { amount: number | bigint };

export function getDepositToEscrowInstructionDataEncoder(): Encoder<DepositToEscrowInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: DEPOSIT_TO_ESCROW_DISCRIMINATOR })
  );
}

export function getDepositToEscrowInstructionDataDecoder(): Decoder<DepositToEscrowInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getDepositToEscrowInstructionDataCodec(): Codec<
  DepositToEscrowInstructionDataArgs,
  DepositToEscrowInstructionData
> {
  return combineCodec(
    getDepositToEscrowInstructionDataEncoder(),
    getDepositToEscrowInstructionDataDecoder()
  );
}

export type DepositToEscrowAsyncInput<
  TAccountUser extends string = string,
  TAccountEscrow extends string = string,
  TAccountMaster extends string = string,
  TAccountProgramState extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  user: Address<TAccountUser>;
  escrow?: Address<TAccountEscrow>;
  /** Brukes for 책 hente m책nedspris */
  master?: Address<TAccountMaster>;
  programState?: Address<TAccountProgramState>;
  authority: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: DepositToEscrowInstructionDataArgs['amount'];
};

export async function getDepositToEscrowInstructionAsync<
  TAccountUser extends string,
  TAccountEscrow extends string,
  TAccountMaster extends string,
  TAccountProgramState extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof USERACCOUNT_PROGRAM_ADDRESS,
>(
  input: DepositToEscrowAsyncInput<
    TAccountUser,
    TAccountEscrow,
    TAccountMaster,
    TAccountProgramState,
    TAccountAuthority,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  DepositToEscrowInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountEscrow,
    TAccountMaster,
    TAccountProgramState,
    TAccountAuthority,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? USERACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    escrow: { value: input.escrow ?? null, isWritable: true },
    master: { value: input.master ?? null, isWritable: false },
    programState: { value: input.programState ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.escrow.value) {
    accounts.escrow.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([101, 115, 99, 114, 111, 119])),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
      ],
    });
  }
  if (!accounts.master.value) {
    accounts.master.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([109, 97, 115, 116, 101, 114])),
      ],
    });
  }
  if (!accounts.programState.value) {
    accounts.programState.value = await findProgramStatePda();
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.master),
      getAccountMeta(accounts.programState),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getDepositToEscrowInstructionDataEncoder().encode(
      args as DepositToEscrowInstructionDataArgs
    ),
  } as DepositToEscrowInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountEscrow,
    TAccountMaster,
    TAccountProgramState,
    TAccountAuthority,
    TAccountSystemProgram
  >;

  return instruction;
}

export type DepositToEscrowInput<
  TAccountUser extends string = string,
  TAccountEscrow extends string = string,
  TAccountMaster extends string = string,
  TAccountProgramState extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  user: Address<TAccountUser>;
  escrow: Address<TAccountEscrow>;
  /** Brukes for 책 hente m책nedspris */
  master: Address<TAccountMaster>;
  programState: Address<TAccountProgramState>;
  authority: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: DepositToEscrowInstructionDataArgs['amount'];
};

export function getDepositToEscrowInstruction<
  TAccountUser extends string,
  TAccountEscrow extends string,
  TAccountMaster extends string,
  TAccountProgramState extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof USERACCOUNT_PROGRAM_ADDRESS,
>(
  input: DepositToEscrowInput<
    TAccountUser,
    TAccountEscrow,
    TAccountMaster,
    TAccountProgramState,
    TAccountAuthority,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): DepositToEscrowInstruction<
  TProgramAddress,
  TAccountUser,
  TAccountEscrow,
  TAccountMaster,
  TAccountProgramState,
  TAccountAuthority,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? USERACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    escrow: { value: input.escrow ?? null, isWritable: true },
    master: { value: input.master ?? null, isWritable: false },
    programState: { value: input.programState ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.escrow),
      getAccountMeta(accounts.master),
      getAccountMeta(accounts.programState),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getDepositToEscrowInstructionDataEncoder().encode(
      args as DepositToEscrowInstructionDataArgs
    ),
  } as DepositToEscrowInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountEscrow,
    TAccountMaster,
    TAccountProgramState,
    TAccountAuthority,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedDepositToEscrowInstruction<
  TProgram extends string = typeof USERACCOUNT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    user: TAccountMetas[0];
    escrow: TAccountMetas[1];
    /** Brukes for 책 hente m책nedspris */
    master: TAccountMetas[2];
    programState: TAccountMetas[3];
    authority: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
  };
  data: DepositToEscrowInstructionData;
};

export function parseDepositToEscrowInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedDepositToEscrowInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      user: getNextAccount(),
      escrow: getNextAccount(),
      master: getNextAccount(),
      programState: getNextAccount(),
      authority: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getDepositToEscrowInstructionDataDecoder().decode(instruction.data),
  };
}
