/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (
  program: Program,
  cause?: Error
) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** StringTooLong: String too long */
export class StringTooLongError extends ProgramError {
  override readonly name: string = 'StringTooLong';

  readonly code: number = 0x1770; // 6000

  constructor(program: Program, cause?: Error) {
    super('String too long', program, cause);
  }
}
codeToErrorMap.set(0x1770, StringTooLongError);
nameToErrorMap.set('StringTooLong', StringTooLongError);

/** StringTooShort: String too short */
export class StringTooShortError extends ProgramError {
  override readonly name: string = 'StringTooShort';

  readonly code: number = 0x1771; // 6001

  constructor(program: Program, cause?: Error) {
    super('String too short', program, cause);
  }
}
codeToErrorMap.set(0x1771, StringTooShortError);
nameToErrorMap.set('StringTooShort', StringTooShortError);

/** DataSizeExceeded: Data size exceeded */
export class DataSizeExceededError extends ProgramError {
  override readonly name: string = 'DataSizeExceeded';

  readonly code: number = 0x1772; // 6002

  constructor(program: Program, cause?: Error) {
    super('Data size exceeded', program, cause);
  }
}
codeToErrorMap.set(0x1772, DataSizeExceededError);
nameToErrorMap.set('DataSizeExceeded', DataSizeExceededError);

/** Unauthorized: Unauthorized */
export class UnauthorizedError extends ProgramError {
  override readonly name: string = 'Unauthorized';

  readonly code: number = 0x1773; // 6003

  constructor(program: Program, cause?: Error) {
    super('Unauthorized', program, cause);
  }
}
codeToErrorMap.set(0x1773, UnauthorizedError);
nameToErrorMap.set('Unauthorized', UnauthorizedError);

/** AmountTooLow: Amount too low */
export class AmountTooLowError extends ProgramError {
  override readonly name: string = 'AmountTooLow';

  readonly code: number = 0x1774; // 6004

  constructor(program: Program, cause?: Error) {
    super('Amount too low', program, cause);
  }
}
codeToErrorMap.set(0x1774, AmountTooLowError);
nameToErrorMap.set('AmountTooLow', AmountTooLowError);

/** AmountTooHigh: Amount too high */
export class AmountTooHighError extends ProgramError {
  override readonly name: string = 'AmountTooHigh';

  readonly code: number = 0x1775; // 6005

  constructor(program: Program, cause?: Error) {
    super('Amount too high', program, cause);
  }
}
codeToErrorMap.set(0x1775, AmountTooHighError);
nameToErrorMap.set('AmountTooHigh', AmountTooHighError);

/** InsufficientFunds: Insufficient funds */
export class InsufficientFundsError extends ProgramError {
  override readonly name: string = 'InsufficientFunds';

  readonly code: number = 0x1776; // 6006

  constructor(program: Program, cause?: Error) {
    super('Insufficient funds', program, cause);
  }
}
codeToErrorMap.set(0x1776, InsufficientFundsError);
nameToErrorMap.set('InsufficientFunds', InsufficientFundsError);

/** InsufficientFundsForRent: Ikke nok lamports for å beholde kontoen rentefritatt. Du må beholde en minimumssaldo. */
export class InsufficientFundsForRentError extends ProgramError {
  override readonly name: string = 'InsufficientFundsForRent';

  readonly code: number = 0x1777; // 6007

  constructor(program: Program, cause?: Error) {
    super(
      'Ikke nok lamports for å beholde kontoen rentefritatt. Du må beholde en minimumssaldo.',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x1777, InsufficientFundsForRentError);
nameToErrorMap.set('InsufficientFundsForRent', InsufficientFundsForRentError);

/** EscrowAlreadyExists: Brukeren har allerede en aktiv escrow-konto. Kanseller den eksisterende før du oppretter en ny. */
export class EscrowAlreadyExistsError extends ProgramError {
  override readonly name: string = 'EscrowAlreadyExists';

  readonly code: number = 0x1778; // 6008

  constructor(program: Program, cause?: Error) {
    super(
      'Brukeren har allerede en aktiv escrow-konto. Kanseller den eksisterende før du oppretter en ny.',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x1778, EscrowAlreadyExistsError);
nameToErrorMap.set('EscrowAlreadyExists', EscrowAlreadyExistsError);

/** InvalidMasterAccount: Ugyldig master-konto: månedspris må være større enn 0 */
export class InvalidMasterAccountError extends ProgramError {
  override readonly name: string = 'InvalidMasterAccount';

  readonly code: number = 0x1779; // 6009

  constructor(program: Program, cause?: Error) {
    super(
      'Ugyldig master-konto: månedspris må være større enn 0',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x1779, InvalidMasterAccountError);
nameToErrorMap.set('InvalidMasterAccount', InvalidMasterAccountError);

/** InvalidFeeProgramAccount: Ugyldig fee_program konto */
export class InvalidFeeProgramAccountError extends ProgramError {
  override readonly name: string = 'InvalidFeeProgramAccount';

  readonly code: number = 0x177a; // 6010

  constructor(program: Program, cause?: Error) {
    super('Ugyldig fee_program konto', program, cause);
  }
}
codeToErrorMap.set(0x177a, InvalidFeeProgramAccountError);
nameToErrorMap.set('InvalidFeeProgramAccount', InvalidFeeProgramAccountError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getUseraccountErrorFromCode(
  code: number,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getUseraccountErrorFromName(
  name: string,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
