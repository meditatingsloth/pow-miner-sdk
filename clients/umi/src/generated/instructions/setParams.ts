/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  i64,
  mapSerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { findConfigPda } from '../accounts';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type SetParamsInstructionAccounts = {
  config?: PublicKey | Pda;
  admin: Signer;
};

// Data.
export type SetParamsInstructionData = {
  discriminator: Uint8Array;
  minDifficulty: number;
  baseCooldownSecs: bigint;
  rewardDivisor: bigint;
  maxRewardAllowed: bigint;
  maxDailyReward: bigint;
  baseReward: bigint;
};

export type SetParamsInstructionDataArgs = {
  minDifficulty: number;
  baseCooldownSecs: number | bigint;
  rewardDivisor: number | bigint;
  maxRewardAllowed: number | bigint;
  maxDailyReward: number | bigint;
  baseReward: number | bigint;
};

export function getSetParamsInstructionDataSerializer(): Serializer<
  SetParamsInstructionDataArgs,
  SetParamsInstructionData
> {
  return mapSerializer<
    SetParamsInstructionDataArgs,
    any,
    SetParamsInstructionData
  >(
    struct<SetParamsInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['minDifficulty', u8()],
        ['baseCooldownSecs', i64()],
        ['rewardDivisor', u64()],
        ['maxRewardAllowed', u64()],
        ['maxDailyReward', u64()],
        ['baseReward', u64()],
      ],
      { description: 'SetParamsInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([27, 234, 178, 52, 147, 2, 187, 141]),
    })
  ) as Serializer<SetParamsInstructionDataArgs, SetParamsInstructionData>;
}

// Args.
export type SetParamsInstructionArgs = SetParamsInstructionDataArgs;

// Instruction.
export function setParams(
  context: Pick<Context, 'eddsa' | 'programs'>,
  input: SetParamsInstructionAccounts & SetParamsInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'powMiner',
    'BGLDbLHXzZEKvZX2PAkvSChWtZYySZ16Drj6NX247AfY'
  );

  // Accounts.
  const resolvedAccounts = {
    config: {
      index: 0,
      isWritable: true as boolean,
      value: input.config ?? null,
    },
    admin: {
      index: 1,
      isWritable: false as boolean,
      value: input.admin ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: SetParamsInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.config.value) {
    resolvedAccounts.config.value = findConfigPda(context);
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getSetParamsInstructionDataSerializer().serialize(
    resolvedArgs as SetParamsInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
