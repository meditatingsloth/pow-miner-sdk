/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { USERACCOUNT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UPDATE_MONTHLY_PRICE_DISCRIMINATOR = new Uint8Array([
  208, 197, 8, 227, 250, 154, 252, 129,
]);

export function getUpdateMonthlyPriceDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_MONTHLY_PRICE_DISCRIMINATOR
  );
}

export type UpdateMonthlyPriceInstruction<
  TProgram extends string = typeof USERACCOUNT_PROGRAM_ADDRESS,
  TAccountMaster extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountMaster extends string
        ? WritableAccount<TAccountMaster>
        : TAccountMaster,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateMonthlyPriceInstructionData = {
  discriminator: ReadonlyUint8Array;
  newMonthlyPrice: bigint;
};

export type UpdateMonthlyPriceInstructionDataArgs = {
  newMonthlyPrice: number | bigint;
};

export function getUpdateMonthlyPriceInstructionDataEncoder(): Encoder<UpdateMonthlyPriceInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['newMonthlyPrice', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: UPDATE_MONTHLY_PRICE_DISCRIMINATOR })
  );
}

export function getUpdateMonthlyPriceInstructionDataDecoder(): Decoder<UpdateMonthlyPriceInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['newMonthlyPrice', getU64Decoder()],
  ]);
}

export function getUpdateMonthlyPriceInstructionDataCodec(): Codec<
  UpdateMonthlyPriceInstructionDataArgs,
  UpdateMonthlyPriceInstructionData
> {
  return combineCodec(
    getUpdateMonthlyPriceInstructionDataEncoder(),
    getUpdateMonthlyPriceInstructionDataDecoder()
  );
}

export type UpdateMonthlyPriceAsyncInput<
  TAccountMaster extends string = string,
  TAccountAuthority extends string = string,
> = {
  master?: Address<TAccountMaster>;
  authority: TransactionSigner<TAccountAuthority>;
  newMonthlyPrice: UpdateMonthlyPriceInstructionDataArgs['newMonthlyPrice'];
};

export async function getUpdateMonthlyPriceInstructionAsync<
  TAccountMaster extends string,
  TAccountAuthority extends string,
  TProgramAddress extends Address = typeof USERACCOUNT_PROGRAM_ADDRESS,
>(
  input: UpdateMonthlyPriceAsyncInput<TAccountMaster, TAccountAuthority>,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UpdateMonthlyPriceInstruction<
    TProgramAddress,
    TAccountMaster,
    TAccountAuthority
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? USERACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    master: { value: input.master ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.master.value) {
    accounts.master.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([109, 97, 115, 116, 101, 114])),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.master),
      getAccountMeta(accounts.authority),
    ],
    programAddress,
    data: getUpdateMonthlyPriceInstructionDataEncoder().encode(
      args as UpdateMonthlyPriceInstructionDataArgs
    ),
  } as UpdateMonthlyPriceInstruction<
    TProgramAddress,
    TAccountMaster,
    TAccountAuthority
  >;

  return instruction;
}

export type UpdateMonthlyPriceInput<
  TAccountMaster extends string = string,
  TAccountAuthority extends string = string,
> = {
  master: Address<TAccountMaster>;
  authority: TransactionSigner<TAccountAuthority>;
  newMonthlyPrice: UpdateMonthlyPriceInstructionDataArgs['newMonthlyPrice'];
};

export function getUpdateMonthlyPriceInstruction<
  TAccountMaster extends string,
  TAccountAuthority extends string,
  TProgramAddress extends Address = typeof USERACCOUNT_PROGRAM_ADDRESS,
>(
  input: UpdateMonthlyPriceInput<TAccountMaster, TAccountAuthority>,
  config?: { programAddress?: TProgramAddress }
): UpdateMonthlyPriceInstruction<
  TProgramAddress,
  TAccountMaster,
  TAccountAuthority
> {
  // Program address.
  const programAddress = config?.programAddress ?? USERACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    master: { value: input.master ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.master),
      getAccountMeta(accounts.authority),
    ],
    programAddress,
    data: getUpdateMonthlyPriceInstructionDataEncoder().encode(
      args as UpdateMonthlyPriceInstructionDataArgs
    ),
  } as UpdateMonthlyPriceInstruction<
    TProgramAddress,
    TAccountMaster,
    TAccountAuthority
  >;

  return instruction;
}

export type ParsedUpdateMonthlyPriceInstruction<
  TProgram extends string = typeof USERACCOUNT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    master: TAccountMetas[0];
    authority: TAccountMetas[1];
  };
  data: UpdateMonthlyPriceInstructionData;
};

export function parseUpdateMonthlyPriceInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUpdateMonthlyPriceInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      master: getNextAccount(),
      authority: getNextAccount(),
    },
    data: getUpdateMonthlyPriceInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
