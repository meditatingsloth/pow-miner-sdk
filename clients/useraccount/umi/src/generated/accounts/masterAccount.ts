/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type MasterAccount = Account<MasterAccountAccountData>;

export type MasterAccountAccountData = {
  discriminator: Uint8Array;
  authority: PublicKey;
  feeRate: number;
  minFee: bigint;
  maxFee: bigint;
  monthlyPrice: bigint;
};

export type MasterAccountAccountDataArgs = {
  authority: PublicKey;
  feeRate: number;
  minFee: number | bigint;
  maxFee: number | bigint;
  monthlyPrice: number | bigint;
};

export function getMasterAccountAccountDataSerializer(): Serializer<
  MasterAccountAccountDataArgs,
  MasterAccountAccountData
> {
  return mapSerializer<
    MasterAccountAccountDataArgs,
    any,
    MasterAccountAccountData
  >(
    struct<MasterAccountAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['authority', publicKeySerializer()],
        ['feeRate', u8()],
        ['minFee', u64()],
        ['maxFee', u64()],
        ['monthlyPrice', u64()],
      ],
      { description: 'MasterAccountAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([30, 179, 10, 149, 99, 235, 125, 34]),
    })
  ) as Serializer<MasterAccountAccountDataArgs, MasterAccountAccountData>;
}

export function deserializeMasterAccount(
  rawAccount: RpcAccount
): MasterAccount {
  return deserializeAccount(
    rawAccount,
    getMasterAccountAccountDataSerializer()
  );
}

export async function fetchMasterAccount(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<MasterAccount> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'MasterAccount');
  return deserializeMasterAccount(maybeAccount);
}

export async function safeFetchMasterAccount(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<MasterAccount | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeMasterAccount(maybeAccount) : null;
}

export async function fetchAllMasterAccount(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<MasterAccount[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'MasterAccount');
    return deserializeMasterAccount(maybeAccount);
  });
}

export async function safeFetchAllMasterAccount(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<MasterAccount[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeMasterAccount(maybeAccount as RpcAccount)
    );
}

export function getMasterAccountGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'useraccount',
    'KoNT93eGXFcQJxZQqBvrBLQQCcxEPhKrmZoqFNmxGjk'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      authority: PublicKey;
      feeRate: number;
      minFee: number | bigint;
      maxFee: number | bigint;
      monthlyPrice: number | bigint;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      authority: [8, publicKeySerializer()],
      feeRate: [40, u8()],
      minFee: [41, u64()],
      maxFee: [49, u64()],
      monthlyPrice: [57, u64()],
    })
    .deserializeUsing<MasterAccount>((account) =>
      deserializeMasterAccount(account)
    )
    .whereField(
      'discriminator',
      new Uint8Array([30, 179, 10, 149, 99, 235, 125, 34])
    );
}

export function getMasterAccountSize(): number {
  return 65;
}
