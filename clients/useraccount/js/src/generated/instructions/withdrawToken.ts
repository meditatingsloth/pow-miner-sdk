/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { USERACCOUNT_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const WITHDRAW_TOKEN_DISCRIMINATOR = new Uint8Array([
  136, 235, 181, 5, 101, 109, 57, 81,
]);

export function getWithdrawTokenDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAW_TOKEN_DISCRIMINATOR
  );
}

export type WithdrawTokenInstruction<
  TProgram extends string = typeof USERACCOUNT_PROGRAM_ADDRESS,
  TAccountUser extends string | IAccountMeta<string> = string,
  TAccountTokenPool extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountTokenAccount extends string | IAccountMeta<string> = string,
  TAccountUserTokenAccount extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountUser extends string
        ? ReadonlyAccount<TAccountUser>
        : TAccountUser,
      TAccountTokenPool extends string
        ? WritableAccount<TAccountTokenPool>
        : TAccountTokenPool,
      TAccountMint extends string
        ? ReadonlyAccount<TAccountMint>
        : TAccountMint,
      TAccountTokenAccount extends string
        ? WritableAccount<TAccountTokenAccount>
        : TAccountTokenAccount,
      TAccountUserTokenAccount extends string
        ? WritableAccount<TAccountUserTokenAccount>
        : TAccountUserTokenAccount,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawTokenInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type WithdrawTokenInstructionDataArgs = { amount: number | bigint };

export function getWithdrawTokenInstructionDataEncoder(): Encoder<WithdrawTokenInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: WITHDRAW_TOKEN_DISCRIMINATOR })
  );
}

export function getWithdrawTokenInstructionDataDecoder(): Decoder<WithdrawTokenInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getWithdrawTokenInstructionDataCodec(): Codec<
  WithdrawTokenInstructionDataArgs,
  WithdrawTokenInstructionData
> {
  return combineCodec(
    getWithdrawTokenInstructionDataEncoder(),
    getWithdrawTokenInstructionDataDecoder()
  );
}

export type WithdrawTokenAsyncInput<
  TAccountUser extends string = string,
  TAccountTokenPool extends string = string,
  TAccountMint extends string = string,
  TAccountTokenAccount extends string = string,
  TAccountUserTokenAccount extends string = string,
  TAccountAuthority extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  user?: Address<TAccountUser>;
  tokenPool?: Address<TAccountTokenPool>;
  mint: Address<TAccountMint>;
  tokenAccount: Address<TAccountTokenAccount>;
  userTokenAccount: Address<TAccountUserTokenAccount>;
  authority: TransactionSigner<TAccountAuthority>;
  tokenProgram?: Address<TAccountTokenProgram>;
  amount: WithdrawTokenInstructionDataArgs['amount'];
};

export async function getWithdrawTokenInstructionAsync<
  TAccountUser extends string,
  TAccountTokenPool extends string,
  TAccountMint extends string,
  TAccountTokenAccount extends string,
  TAccountUserTokenAccount extends string,
  TAccountAuthority extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof USERACCOUNT_PROGRAM_ADDRESS,
>(
  input: WithdrawTokenAsyncInput<
    TAccountUser,
    TAccountTokenPool,
    TAccountMint,
    TAccountTokenAccount,
    TAccountUserTokenAccount,
    TAccountAuthority,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  WithdrawTokenInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountTokenPool,
    TAccountMint,
    TAccountTokenAccount,
    TAccountUserTokenAccount,
    TAccountAuthority,
    TAccountTokenProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? USERACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: false },
    tokenPool: { value: input.tokenPool ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    tokenAccount: { value: input.tokenAccount ?? null, isWritable: true },
    userTokenAccount: {
      value: input.userTokenAccount ?? null,
      isWritable: true,
    },
    authority: { value: input.authority ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.user.value) {
    accounts.user.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([117, 115, 101, 114])),
        getAddressEncoder().encode(expectAddress(accounts.authority.value)),
      ],
    });
  }
  if (!accounts.tokenPool.value) {
    accounts.tokenPool.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([116, 111, 107, 101, 110, 95, 112, 111, 111, 108])
        ),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.tokenPool),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.tokenAccount),
      getAccountMeta(accounts.userTokenAccount),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getWithdrawTokenInstructionDataEncoder().encode(
      args as WithdrawTokenInstructionDataArgs
    ),
  } as WithdrawTokenInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountTokenPool,
    TAccountMint,
    TAccountTokenAccount,
    TAccountUserTokenAccount,
    TAccountAuthority,
    TAccountTokenProgram
  >;

  return instruction;
}

export type WithdrawTokenInput<
  TAccountUser extends string = string,
  TAccountTokenPool extends string = string,
  TAccountMint extends string = string,
  TAccountTokenAccount extends string = string,
  TAccountUserTokenAccount extends string = string,
  TAccountAuthority extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  user: Address<TAccountUser>;
  tokenPool: Address<TAccountTokenPool>;
  mint: Address<TAccountMint>;
  tokenAccount: Address<TAccountTokenAccount>;
  userTokenAccount: Address<TAccountUserTokenAccount>;
  authority: TransactionSigner<TAccountAuthority>;
  tokenProgram?: Address<TAccountTokenProgram>;
  amount: WithdrawTokenInstructionDataArgs['amount'];
};

export function getWithdrawTokenInstruction<
  TAccountUser extends string,
  TAccountTokenPool extends string,
  TAccountMint extends string,
  TAccountTokenAccount extends string,
  TAccountUserTokenAccount extends string,
  TAccountAuthority extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof USERACCOUNT_PROGRAM_ADDRESS,
>(
  input: WithdrawTokenInput<
    TAccountUser,
    TAccountTokenPool,
    TAccountMint,
    TAccountTokenAccount,
    TAccountUserTokenAccount,
    TAccountAuthority,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): WithdrawTokenInstruction<
  TProgramAddress,
  TAccountUser,
  TAccountTokenPool,
  TAccountMint,
  TAccountTokenAccount,
  TAccountUserTokenAccount,
  TAccountAuthority,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? USERACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: false },
    tokenPool: { value: input.tokenPool ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: false },
    tokenAccount: { value: input.tokenAccount ?? null, isWritable: true },
    userTokenAccount: {
      value: input.userTokenAccount ?? null,
      isWritable: true,
    },
    authority: { value: input.authority ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.tokenPool),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.tokenAccount),
      getAccountMeta(accounts.userTokenAccount),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getWithdrawTokenInstructionDataEncoder().encode(
      args as WithdrawTokenInstructionDataArgs
    ),
  } as WithdrawTokenInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountTokenPool,
    TAccountMint,
    TAccountTokenAccount,
    TAccountUserTokenAccount,
    TAccountAuthority,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedWithdrawTokenInstruction<
  TProgram extends string = typeof USERACCOUNT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    user: TAccountMetas[0];
    tokenPool: TAccountMetas[1];
    mint: TAccountMetas[2];
    tokenAccount: TAccountMetas[3];
    userTokenAccount: TAccountMetas[4];
    authority: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
  };
  data: WithdrawTokenInstructionData;
};

export function parseWithdrawTokenInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedWithdrawTokenInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      user: getNextAccount(),
      tokenPool: getNextAccount(),
      mint: getNextAccount(),
      tokenAccount: getNextAccount(),
      userTokenAccount: getNextAccount(),
      authority: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getWithdrawTokenInstructionDataDecoder().decode(instruction.data),
  };
}
