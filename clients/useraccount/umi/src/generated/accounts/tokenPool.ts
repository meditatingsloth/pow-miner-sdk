/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  i64,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u32,
} from '@metaplex-foundation/umi/serializers';

export type TokenPool = Account<TokenPoolAccountData>;

export type TokenPoolAccountData = {
  discriminator: Uint8Array;
  owner: PublicKey;
  mint: PublicKey;
  tokenAccount: PublicKey;
  tokenName: Uint8Array;
  createdAt: bigint;
  lastUpdated: bigint;
};

export type TokenPoolAccountDataArgs = {
  owner: PublicKey;
  mint: PublicKey;
  tokenAccount: PublicKey;
  tokenName: Uint8Array;
  createdAt: number | bigint;
  lastUpdated: number | bigint;
};

export function getTokenPoolAccountDataSerializer(): Serializer<
  TokenPoolAccountDataArgs,
  TokenPoolAccountData
> {
  return mapSerializer<TokenPoolAccountDataArgs, any, TokenPoolAccountData>(
    struct<TokenPoolAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['owner', publicKeySerializer()],
        ['mint', publicKeySerializer()],
        ['tokenAccount', publicKeySerializer()],
        ['tokenName', bytes({ size: u32() })],
        ['createdAt', i64()],
        ['lastUpdated', i64()],
      ],
      { description: 'TokenPoolAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([103, 51, 150, 210, 226, 131, 104, 33]),
    })
  ) as Serializer<TokenPoolAccountDataArgs, TokenPoolAccountData>;
}

export function deserializeTokenPool(rawAccount: RpcAccount): TokenPool {
  return deserializeAccount(rawAccount, getTokenPoolAccountDataSerializer());
}

export async function fetchTokenPool(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<TokenPool> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'TokenPool');
  return deserializeTokenPool(maybeAccount);
}

export async function safeFetchTokenPool(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<TokenPool | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeTokenPool(maybeAccount) : null;
}

export async function fetchAllTokenPool(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<TokenPool[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'TokenPool');
    return deserializeTokenPool(maybeAccount);
  });
}

export async function safeFetchAllTokenPool(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<TokenPool[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeTokenPool(maybeAccount as RpcAccount));
}

export function getTokenPoolGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'useraccount',
    'KoNT93eGXFcQJxZQqBvrBLQQCcxEPhKrmZoqFNmxGjk'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      owner: PublicKey;
      mint: PublicKey;
      tokenAccount: PublicKey;
      tokenName: Uint8Array;
      createdAt: number | bigint;
      lastUpdated: number | bigint;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      owner: [8, publicKeySerializer()],
      mint: [40, publicKeySerializer()],
      tokenAccount: [72, publicKeySerializer()],
      tokenName: [104, bytes({ size: u32() })],
      createdAt: [null, i64()],
      lastUpdated: [null, i64()],
    })
    .deserializeUsing<TokenPool>((account) => deserializeTokenPool(account))
    .whereField(
      'discriminator',
      new Uint8Array([103, 51, 150, 210, 226, 131, 104, 33])
    );
}
