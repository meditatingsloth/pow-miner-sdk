/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import { findConfigPda } from '../accounts';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type InitializeConfigInstructionAccounts = {
  config?: PublicKey | Pda;
  admin: Signer;
  mint: PublicKey | Pda;
  mintAuth?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
};

// Data.
export type InitializeConfigInstructionData = {
  discriminator: Uint8Array;
  mintAuthBump: number;
};

export type InitializeConfigInstructionDataArgs = { mintAuthBump: number };

export function getInitializeConfigInstructionDataSerializer(): Serializer<
  InitializeConfigInstructionDataArgs,
  InitializeConfigInstructionData
> {
  return mapSerializer<
    InitializeConfigInstructionDataArgs,
    any,
    InitializeConfigInstructionData
  >(
    struct<InitializeConfigInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['mintAuthBump', u8()],
      ],
      { description: 'InitializeConfigInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([208, 127, 21, 1, 194, 190, 196, 70]),
    })
  ) as Serializer<
    InitializeConfigInstructionDataArgs,
    InitializeConfigInstructionData
  >;
}

// Args.
export type InitializeConfigInstructionArgs =
  InitializeConfigInstructionDataArgs;

// Instruction.
export function initializeConfig(
  context: Pick<Context, 'eddsa' | 'programs'>,
  input: InitializeConfigInstructionAccounts & InitializeConfigInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'powMiner',
    'BGLDbLHXzZEKvZX2PAkvSChWtZYySZ16Drj6NX247AfY'
  );

  // Accounts.
  const resolvedAccounts = {
    config: {
      index: 0,
      isWritable: true as boolean,
      value: input.config ?? null,
    },
    admin: {
      index: 1,
      isWritable: true as boolean,
      value: input.admin ?? null,
    },
    mint: { index: 2, isWritable: true as boolean, value: input.mint ?? null },
    mintAuth: {
      index: 3,
      isWritable: false as boolean,
      value: input.mintAuth ?? null,
    },
    systemProgram: {
      index: 4,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
    tokenProgram: {
      index: 5,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: InitializeConfigInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.config.value) {
    resolvedAccounts.config.value = findConfigPda(context);
  }
  if (!resolvedAccounts.mintAuth.value) {
    resolvedAccounts.mintAuth.value = context.eddsa.findPda(programId, [
      bytes().serialize(
        new Uint8Array([
          109, 105, 110, 116, 45, 97, 117, 116, 104, 111, 114, 105, 116, 121,
        ])
      ),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.mint.value)
      ),
    ]);
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'systemProgram',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'tokenProgram',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getInitializeConfigInstructionDataSerializer().serialize(
    resolvedArgs as InitializeConfigInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
