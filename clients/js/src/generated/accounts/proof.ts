/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { ProofSeeds, findProofPda } from '../pdas';

export const PROOF_DISCRIMINATOR = new Uint8Array([
  163, 35, 13, 71, 15, 128, 63, 82,
]);

export function getProofDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(PROOF_DISCRIMINATOR);
}

export type Proof = {
  discriminator: ReadonlyUint8Array;
  challenge: ReadonlyUint8Array;
  balance: bigint;
  lastMinedAt: bigint;
  nextMineAt: bigint;
  dailyTotal: bigint;
  lastDailyReset: bigint;
  createdAtSlot: bigint;
  challengeSlot: bigint;
  totalHashes: bigint;
  bump: number;
  padding: ReadonlyUint8Array;
};

export type ProofArgs = {
  challenge: ReadonlyUint8Array;
  balance: number | bigint;
  lastMinedAt: number | bigint;
  nextMineAt: number | bigint;
  dailyTotal: number | bigint;
  lastDailyReset: number | bigint;
  createdAtSlot: number | bigint;
  challengeSlot: number | bigint;
  totalHashes: number | bigint;
  bump: number;
  padding: ReadonlyUint8Array;
};

export function getProofEncoder(): Encoder<ProofArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['challenge', fixEncoderSize(getBytesEncoder(), 32)],
      ['balance', getU64Encoder()],
      ['lastMinedAt', getI64Encoder()],
      ['nextMineAt', getI64Encoder()],
      ['dailyTotal', getU64Encoder()],
      ['lastDailyReset', getI64Encoder()],
      ['createdAtSlot', getU64Encoder()],
      ['challengeSlot', getU64Encoder()],
      ['totalHashes', getU64Encoder()],
      ['bump', getU8Encoder()],
      ['padding', fixEncoderSize(getBytesEncoder(), 7)],
    ]),
    (value) => ({ ...value, discriminator: PROOF_DISCRIMINATOR })
  );
}

export function getProofDecoder(): Decoder<Proof> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['challenge', fixDecoderSize(getBytesDecoder(), 32)],
    ['balance', getU64Decoder()],
    ['lastMinedAt', getI64Decoder()],
    ['nextMineAt', getI64Decoder()],
    ['dailyTotal', getU64Decoder()],
    ['lastDailyReset', getI64Decoder()],
    ['createdAtSlot', getU64Decoder()],
    ['challengeSlot', getU64Decoder()],
    ['totalHashes', getU64Decoder()],
    ['bump', getU8Decoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 7)],
  ]);
}

export function getProofCodec(): Codec<ProofArgs, Proof> {
  return combineCodec(getProofEncoder(), getProofDecoder());
}

export function decodeProof<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Proof, TAddress>;
export function decodeProof<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Proof, TAddress>;
export function decodeProof<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Proof, TAddress> | MaybeAccount<Proof, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getProofDecoder()
  );
}

export async function fetchProof<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Proof, TAddress>> {
  const maybeAccount = await fetchMaybeProof(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeProof<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Proof, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeProof(maybeAccount);
}

export async function fetchAllProof(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Proof>[]> {
  const maybeAccounts = await fetchAllMaybeProof(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeProof(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Proof>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeProof(maybeAccount));
}

export function getProofSize(): number {
  return 112;
}

export async function fetchProofFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: ProofSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<Proof>> {
  const maybeAccount = await fetchMaybeProofFromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeProofFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: ProofSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<Proof>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findProofPda(seeds, { programAddress });
  return await fetchMaybeProof(rpc, address, fetchConfig);
}
