/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  struct,
  u64,
} from '@metaplex-foundation/umi/serializers';
import { findConfigPda, findProofPda } from '../accounts';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type MineInstructionAccounts = {
  user?: Signer;
  userAccount: PublicKey | Pda;
  proof?: PublicKey | Pda;
  config?: PublicKey | Pda;
  feeReceiver: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type MineInstructionData = {
  discriminator: Uint8Array;
  slot: bigint;
  nonce: bigint;
  hash: Uint8Array;
  totalHashes: bigint;
};

export type MineInstructionDataArgs = {
  slot: number | bigint;
  nonce: number | bigint;
  hash: Uint8Array;
  totalHashes: number | bigint;
};

export function getMineInstructionDataSerializer(): Serializer<
  MineInstructionDataArgs,
  MineInstructionData
> {
  return mapSerializer<MineInstructionDataArgs, any, MineInstructionData>(
    struct<MineInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['slot', u64()],
        ['nonce', u64()],
        ['hash', bytes({ size: 32 })],
        ['totalHashes', u64()],
      ],
      { description: 'MineInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([59, 22, 178, 213, 139, 197, 160, 196]),
    })
  ) as Serializer<MineInstructionDataArgs, MineInstructionData>;
}

// Args.
export type MineInstructionArgs = MineInstructionDataArgs;

// Instruction.
export function mine(
  context: Pick<Context, 'eddsa' | 'identity' | 'programs'>,
  input: MineInstructionAccounts & MineInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'powMiner',
    'BGLDbLHXzZEKvZX2PAkvSChWtZYySZ16Drj6NX247AfY'
  );

  // Accounts.
  const resolvedAccounts = {
    user: { index: 0, isWritable: true as boolean, value: input.user ?? null },
    userAccount: {
      index: 1,
      isWritable: false as boolean,
      value: input.userAccount ?? null,
    },
    proof: {
      index: 2,
      isWritable: true as boolean,
      value: input.proof ?? null,
    },
    config: {
      index: 3,
      isWritable: true as boolean,
      value: input.config ?? null,
    },
    feeReceiver: {
      index: 4,
      isWritable: true as boolean,
      value: input.feeReceiver ?? null,
    },
    systemProgram: {
      index: 5,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: MineInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.user.value) {
    resolvedAccounts.user.value = context.identity;
  }
  if (!resolvedAccounts.proof.value) {
    resolvedAccounts.proof.value = findProofPda(context, {
      user: expectPublicKey(resolvedAccounts.user.value),
    });
  }
  if (!resolvedAccounts.config.value) {
    resolvedAccounts.config.value = findConfigPda(context);
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'systemProgram',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getMineInstructionDataSerializer().serialize(
    resolvedArgs as MineInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
