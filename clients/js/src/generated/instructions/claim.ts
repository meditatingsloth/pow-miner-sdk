/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { findConfigPda, findProofPda } from '../pdas';
import { POW_MINER_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLAIM_DISCRIMINATOR = new Uint8Array([
  62, 198, 214, 193, 213, 159, 108, 210,
]);

export function getClaimDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CLAIM_DISCRIMINATOR);
}

export type ClaimInstruction<
  TProgram extends string = typeof POW_MINER_PROGRAM_ADDRESS,
  TAccountUser extends string | IAccountMeta<string> = string,
  TAccountProof extends string | IAccountMeta<string> = string,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountUserAta extends string | IAccountMeta<string> = string,
  TAccountMintAuthority extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountFeeReceiver extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & IAccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountProof extends string
        ? WritableAccount<TAccountProof>
        : TAccountProof,
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountUserAta extends string
        ? WritableAccount<TAccountUserAta>
        : TAccountUserAta,
      TAccountMintAuthority extends string
        ? ReadonlyAccount<TAccountMintAuthority>
        : TAccountMintAuthority,
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountFeeReceiver extends string
        ? WritableAccount<TAccountFeeReceiver>
        : TAccountFeeReceiver,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimInstructionData = {
  discriminator: ReadonlyUint8Array;
  mint: Address;
  mintAuthBump: number;
};

export type ClaimInstructionDataArgs = { mint: Address; mintAuthBump: number };

export function getClaimInstructionDataEncoder(): Encoder<ClaimInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['mint', getAddressEncoder()],
      ['mintAuthBump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CLAIM_DISCRIMINATOR })
  );
}

export function getClaimInstructionDataDecoder(): Decoder<ClaimInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['mint', getAddressDecoder()],
    ['mintAuthBump', getU8Decoder()],
  ]);
}

export function getClaimInstructionDataCodec(): Codec<
  ClaimInstructionDataArgs,
  ClaimInstructionData
> {
  return combineCodec(
    getClaimInstructionDataEncoder(),
    getClaimInstructionDataDecoder()
  );
}

export type ClaimAsyncInput<
  TAccountUser extends string = string,
  TAccountProof extends string = string,
  TAccountConfig extends string = string,
  TAccountUserAta extends string = string,
  TAccountMintAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountFeeReceiver extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  user: TransactionSigner<TAccountUser>;
  proof?: Address<TAccountProof>;
  config?: Address<TAccountConfig>;
  userAta?: Address<TAccountUserAta>;
  mintAuthority?: Address<TAccountMintAuthority>;
  mint: Address<TAccountMint>;
  feeReceiver: Address<TAccountFeeReceiver>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  mintArg: ClaimInstructionDataArgs['mint'];
  mintAuthBump: ClaimInstructionDataArgs['mintAuthBump'];
};

export async function getClaimInstructionAsync<
  TAccountUser extends string,
  TAccountProof extends string,
  TAccountConfig extends string,
  TAccountUserAta extends string,
  TAccountMintAuthority extends string,
  TAccountMint extends string,
  TAccountFeeReceiver extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof POW_MINER_PROGRAM_ADDRESS,
>(
  input: ClaimAsyncInput<
    TAccountUser,
    TAccountProof,
    TAccountConfig,
    TAccountUserAta,
    TAccountMintAuthority,
    TAccountMint,
    TAccountFeeReceiver,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ClaimInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountProof,
    TAccountConfig,
    TAccountUserAta,
    TAccountMintAuthority,
    TAccountMint,
    TAccountFeeReceiver,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? POW_MINER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    proof: { value: input.proof ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: true },
    userAta: { value: input.userAta ?? null, isWritable: true },
    mintAuthority: { value: input.mintAuthority ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: true },
    feeReceiver: { value: input.feeReceiver ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input, mint: input.mintArg };

  // Resolve default values.
  if (!accounts.proof.value) {
    accounts.proof.value = await findProofPda({
      user: expectAddress(accounts.user.value),
    });
  }
  if (!accounts.config.value) {
    accounts.config.value = await findConfigPda();
  }
  if (!accounts.userAta.value) {
    accounts.userAta.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.mintAuthority.value) {
    accounts.mintAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            109, 105, 110, 116, 45, 97, 117, 116, 104, 111, 114, 105, 116, 121,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.mint.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.proof),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.userAta),
      getAccountMeta(accounts.mintAuthority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.feeReceiver),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getClaimInstructionDataEncoder().encode(
      args as ClaimInstructionDataArgs
    ),
  } as ClaimInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountProof,
    TAccountConfig,
    TAccountUserAta,
    TAccountMintAuthority,
    TAccountMint,
    TAccountFeeReceiver,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ClaimInput<
  TAccountUser extends string = string,
  TAccountProof extends string = string,
  TAccountConfig extends string = string,
  TAccountUserAta extends string = string,
  TAccountMintAuthority extends string = string,
  TAccountMint extends string = string,
  TAccountFeeReceiver extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  user: TransactionSigner<TAccountUser>;
  proof: Address<TAccountProof>;
  config: Address<TAccountConfig>;
  userAta: Address<TAccountUserAta>;
  mintAuthority: Address<TAccountMintAuthority>;
  mint: Address<TAccountMint>;
  feeReceiver: Address<TAccountFeeReceiver>;
  tokenProgram?: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  mintArg: ClaimInstructionDataArgs['mint'];
  mintAuthBump: ClaimInstructionDataArgs['mintAuthBump'];
};

export function getClaimInstruction<
  TAccountUser extends string,
  TAccountProof extends string,
  TAccountConfig extends string,
  TAccountUserAta extends string,
  TAccountMintAuthority extends string,
  TAccountMint extends string,
  TAccountFeeReceiver extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof POW_MINER_PROGRAM_ADDRESS,
>(
  input: ClaimInput<
    TAccountUser,
    TAccountProof,
    TAccountConfig,
    TAccountUserAta,
    TAccountMintAuthority,
    TAccountMint,
    TAccountFeeReceiver,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimInstruction<
  TProgramAddress,
  TAccountUser,
  TAccountProof,
  TAccountConfig,
  TAccountUserAta,
  TAccountMintAuthority,
  TAccountMint,
  TAccountFeeReceiver,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? POW_MINER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    proof: { value: input.proof ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: true },
    userAta: { value: input.userAta ?? null, isWritable: true },
    mintAuthority: { value: input.mintAuthority ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: true },
    feeReceiver: { value: input.feeReceiver ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input, mint: input.mintArg };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.proof),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.userAta),
      getAccountMeta(accounts.mintAuthority),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.feeReceiver),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getClaimInstructionDataEncoder().encode(
      args as ClaimInstructionDataArgs
    ),
  } as ClaimInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountProof,
    TAccountConfig,
    TAccountUserAta,
    TAccountMintAuthority,
    TAccountMint,
    TAccountFeeReceiver,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedClaimInstruction<
  TProgram extends string = typeof POW_MINER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    user: TAccountMetas[0];
    proof: TAccountMetas[1];
    config: TAccountMetas[2];
    userAta: TAccountMetas[3];
    mintAuthority: TAccountMetas[4];
    mint: TAccountMetas[5];
    feeReceiver: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    associatedTokenProgram: TAccountMetas[8];
    systemProgram: TAccountMetas[9];
  };
  data: ClaimInstructionData;
};

export function parseClaimInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedClaimInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      user: getNextAccount(),
      proof: getNextAccount(),
      config: getNextAccount(),
      userAta: getNextAccount(),
      mintAuthority: getNextAccount(),
      mint: getNextAccount(),
      feeReceiver: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getClaimInstructionDataDecoder().decode(instruction.data),
  };
}
