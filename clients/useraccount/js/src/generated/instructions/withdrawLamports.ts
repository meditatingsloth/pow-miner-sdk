/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { USERACCOUNT_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const WITHDRAW_LAMPORTS_DISCRIMINATOR = new Uint8Array([
  251, 144, 115, 229, 113, 247, 206, 64,
]);

export function getWithdrawLamportsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAW_LAMPORTS_DISCRIMINATOR
  );
}

export type WithdrawLamportsInstruction<
  TProgram extends string = typeof USERACCOUNT_PROGRAM_ADDRESS,
  TAccountUser extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountUser extends string
        ? WritableAccount<TAccountUser>
        : TAccountUser,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawLamportsInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type WithdrawLamportsInstructionDataArgs = { amount: number | bigint };

export function getWithdrawLamportsInstructionDataEncoder(): Encoder<WithdrawLamportsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: WITHDRAW_LAMPORTS_DISCRIMINATOR })
  );
}

export function getWithdrawLamportsInstructionDataDecoder(): Decoder<WithdrawLamportsInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getWithdrawLamportsInstructionDataCodec(): Codec<
  WithdrawLamportsInstructionDataArgs,
  WithdrawLamportsInstructionData
> {
  return combineCodec(
    getWithdrawLamportsInstructionDataEncoder(),
    getWithdrawLamportsInstructionDataDecoder()
  );
}

export type WithdrawLamportsAsyncInput<
  TAccountUser extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  user?: Address<TAccountUser>;
  authority: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: WithdrawLamportsInstructionDataArgs['amount'];
};

export async function getWithdrawLamportsInstructionAsync<
  TAccountUser extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof USERACCOUNT_PROGRAM_ADDRESS,
>(
  input: WithdrawLamportsAsyncInput<
    TAccountUser,
    TAccountAuthority,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  WithdrawLamportsInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountAuthority,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? USERACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.user.value) {
    accounts.user.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([117, 115, 101, 114])),
        getAddressEncoder().encode(expectAddress(accounts.authority.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getWithdrawLamportsInstructionDataEncoder().encode(
      args as WithdrawLamportsInstructionDataArgs
    ),
  } as WithdrawLamportsInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountAuthority,
    TAccountSystemProgram
  >;

  return instruction;
}

export type WithdrawLamportsInput<
  TAccountUser extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  user: Address<TAccountUser>;
  authority: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: WithdrawLamportsInstructionDataArgs['amount'];
};

export function getWithdrawLamportsInstruction<
  TAccountUser extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof USERACCOUNT_PROGRAM_ADDRESS,
>(
  input: WithdrawLamportsInput<
    TAccountUser,
    TAccountAuthority,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): WithdrawLamportsInstruction<
  TProgramAddress,
  TAccountUser,
  TAccountAuthority,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? USERACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getWithdrawLamportsInstructionDataEncoder().encode(
      args as WithdrawLamportsInstructionDataArgs
    ),
  } as WithdrawLamportsInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountAuthority,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedWithdrawLamportsInstruction<
  TProgram extends string = typeof USERACCOUNT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    user: TAccountMetas[0];
    authority: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: WithdrawLamportsInstructionData;
};

export function parseWithdrawLamportsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedWithdrawLamportsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      user: getNextAccount(),
      authority: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getWithdrawLamportsInstructionDataDecoder().decode(instruction.data),
  };
}
