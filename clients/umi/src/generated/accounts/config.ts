/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  i64,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type Config = Account<ConfigAccountData>;

export type ConfigAccountData = {
  discriminator: Uint8Array;
  admin: PublicKey;
  mint: PublicKey;
  totalMinted: bigint;
  rewardDivisor: bigint;
  blocksSinceAdjustment: bigint;
  halvingEpoch: bigint;
  halvingIntervalSecs: bigint;
  lastAdjustmentTs: bigint;
  targetBlockTime: bigint;
  baseCooldownSecs: bigint;
  maxRewardAllowed: bigint;
  maxDailyReward: bigint;
  totalMinedSinceAdjustment: bigint;
  adjustmentPeriodSecs: bigint;
  baseReward: bigint;
  currentHashrate: bigint;
  mintAuthBump: number;
  minDifficulty: number;
  bump: number;
  padding: Uint8Array;
};

export type ConfigAccountDataArgs = {
  admin: PublicKey;
  mint: PublicKey;
  totalMinted: number | bigint;
  rewardDivisor: number | bigint;
  blocksSinceAdjustment: number | bigint;
  halvingEpoch: number | bigint;
  halvingIntervalSecs: number | bigint;
  lastAdjustmentTs: number | bigint;
  targetBlockTime: number | bigint;
  baseCooldownSecs: number | bigint;
  maxRewardAllowed: number | bigint;
  maxDailyReward: number | bigint;
  totalMinedSinceAdjustment: number | bigint;
  adjustmentPeriodSecs: number | bigint;
  baseReward: number | bigint;
  currentHashrate: number | bigint;
  mintAuthBump: number;
  minDifficulty: number;
  bump: number;
  padding: Uint8Array;
};

export function getConfigAccountDataSerializer(): Serializer<
  ConfigAccountDataArgs,
  ConfigAccountData
> {
  return mapSerializer<ConfigAccountDataArgs, any, ConfigAccountData>(
    struct<ConfigAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['admin', publicKeySerializer()],
        ['mint', publicKeySerializer()],
        ['totalMinted', u64()],
        ['rewardDivisor', u64()],
        ['blocksSinceAdjustment', u64()],
        ['halvingEpoch', i64()],
        ['halvingIntervalSecs', i64()],
        ['lastAdjustmentTs', i64()],
        ['targetBlockTime', i64()],
        ['baseCooldownSecs', i64()],
        ['maxRewardAllowed', u64()],
        ['maxDailyReward', u64()],
        ['totalMinedSinceAdjustment', u64()],
        ['adjustmentPeriodSecs', i64()],
        ['baseReward', u64()],
        ['currentHashrate', u64()],
        ['mintAuthBump', u8()],
        ['minDifficulty', u8()],
        ['bump', u8()],
        ['padding', bytes({ size: 5 })],
      ],
      { description: 'ConfigAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([155, 12, 170, 224, 30, 250, 204, 130]),
    })
  ) as Serializer<ConfigAccountDataArgs, ConfigAccountData>;
}

export function deserializeConfig(rawAccount: RpcAccount): Config {
  return deserializeAccount(rawAccount, getConfigAccountDataSerializer());
}

export async function fetchConfig(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Config> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Config');
  return deserializeConfig(maybeAccount);
}

export async function safeFetchConfig(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Config | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeConfig(maybeAccount) : null;
}

export async function fetchAllConfig(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Config[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Config');
    return deserializeConfig(maybeAccount);
  });
}

export async function safeFetchAllConfig(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Config[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeConfig(maybeAccount as RpcAccount));
}

export function getConfigGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'powMiner',
    'BGLDbLHXzZEKvZX2PAkvSChWtZYySZ16Drj6NX247AfY'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      admin: PublicKey;
      mint: PublicKey;
      totalMinted: number | bigint;
      rewardDivisor: number | bigint;
      blocksSinceAdjustment: number | bigint;
      halvingEpoch: number | bigint;
      halvingIntervalSecs: number | bigint;
      lastAdjustmentTs: number | bigint;
      targetBlockTime: number | bigint;
      baseCooldownSecs: number | bigint;
      maxRewardAllowed: number | bigint;
      maxDailyReward: number | bigint;
      totalMinedSinceAdjustment: number | bigint;
      adjustmentPeriodSecs: number | bigint;
      baseReward: number | bigint;
      currentHashrate: number | bigint;
      mintAuthBump: number;
      minDifficulty: number;
      bump: number;
      padding: Uint8Array;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      admin: [8, publicKeySerializer()],
      mint: [40, publicKeySerializer()],
      totalMinted: [72, u64()],
      rewardDivisor: [80, u64()],
      blocksSinceAdjustment: [88, u64()],
      halvingEpoch: [96, i64()],
      halvingIntervalSecs: [104, i64()],
      lastAdjustmentTs: [112, i64()],
      targetBlockTime: [120, i64()],
      baseCooldownSecs: [128, i64()],
      maxRewardAllowed: [136, u64()],
      maxDailyReward: [144, u64()],
      totalMinedSinceAdjustment: [152, u64()],
      adjustmentPeriodSecs: [160, i64()],
      baseReward: [168, u64()],
      currentHashrate: [176, u64()],
      mintAuthBump: [184, u8()],
      minDifficulty: [185, u8()],
      bump: [186, u8()],
      padding: [187, bytes({ size: 5 })],
    })
    .deserializeUsing<Config>((account) => deserializeConfig(account))
    .whereField(
      'discriminator',
      new Uint8Array([155, 12, 170, 224, 30, 250, 204, 130])
    );
}

export function getConfigSize(): number {
  return 192;
}

export function findConfigPda(
  context: Pick<Context, 'eddsa' | 'programs'>
): Pda {
  const programId = context.programs.getPublicKey(
    'powMiner',
    'BGLDbLHXzZEKvZX2PAkvSChWtZYySZ16Drj6NX247AfY'
  );
  return context.eddsa.findPda(programId, [
    string({ size: 'variable' }).serialize('config'),
  ]);
}

export async function fetchConfigFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  options?: RpcGetAccountOptions
): Promise<Config> {
  return fetchConfig(context, findConfigPda(context), options);
}

export async function safeFetchConfigFromSeeds(
  context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>,
  options?: RpcGetAccountOptions
): Promise<Config | null> {
  return safeFetchConfig(context, findConfigPda(context), options);
}
