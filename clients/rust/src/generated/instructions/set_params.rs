//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
#[derive(Debug)]
pub struct SetParams {
    pub config: solana_program::pubkey::Pubkey,

    pub admin: solana_program::pubkey::Pubkey,
}

impl SetParams {
    pub fn instruction(
        &self,
        args: SetParamsInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: SetParamsInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(2 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.admin, true,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&SetParamsInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::POW_MINER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SetParamsInstructionData {
    discriminator: [u8; 8],
}

impl SetParamsInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [27, 234, 178, 52, 147, 2, 187, 141],
        }
    }
}

impl Default for SetParamsInstructionData {
    fn default() -> Self {
        Self::new()
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SetParamsInstructionArgs {
    pub min_difficulty: u8,
    pub base_cooldown_secs: i64,
    pub reward_divisor: u64,
    pub max_reward_allowed: u64,
    pub max_daily_reward: u64,
    pub base_reward: u64,
}

/// Instruction builder for `SetParams`.
///
/// ### Accounts:
///
///   0. `[writable]` config
///   1. `[signer]` admin
#[derive(Clone, Debug, Default)]
pub struct SetParamsBuilder {
    config: Option<solana_program::pubkey::Pubkey>,
    admin: Option<solana_program::pubkey::Pubkey>,
    min_difficulty: Option<u8>,
    base_cooldown_secs: Option<i64>,
    reward_divisor: Option<u64>,
    max_reward_allowed: Option<u64>,
    max_daily_reward: Option<u64>,
    base_reward: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl SetParamsBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn config(&mut self, config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.config = Some(config);
        self
    }
    #[inline(always)]
    pub fn admin(&mut self, admin: solana_program::pubkey::Pubkey) -> &mut Self {
        self.admin = Some(admin);
        self
    }
    #[inline(always)]
    pub fn min_difficulty(&mut self, min_difficulty: u8) -> &mut Self {
        self.min_difficulty = Some(min_difficulty);
        self
    }
    #[inline(always)]
    pub fn base_cooldown_secs(&mut self, base_cooldown_secs: i64) -> &mut Self {
        self.base_cooldown_secs = Some(base_cooldown_secs);
        self
    }
    #[inline(always)]
    pub fn reward_divisor(&mut self, reward_divisor: u64) -> &mut Self {
        self.reward_divisor = Some(reward_divisor);
        self
    }
    #[inline(always)]
    pub fn max_reward_allowed(&mut self, max_reward_allowed: u64) -> &mut Self {
        self.max_reward_allowed = Some(max_reward_allowed);
        self
    }
    #[inline(always)]
    pub fn max_daily_reward(&mut self, max_daily_reward: u64) -> &mut Self {
        self.max_daily_reward = Some(max_daily_reward);
        self
    }
    #[inline(always)]
    pub fn base_reward(&mut self, base_reward: u64) -> &mut Self {
        self.base_reward = Some(base_reward);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = SetParams {
            config: self.config.expect("config is not set"),
            admin: self.admin.expect("admin is not set"),
        };
        let args = SetParamsInstructionArgs {
            min_difficulty: self
                .min_difficulty
                .clone()
                .expect("min_difficulty is not set"),
            base_cooldown_secs: self
                .base_cooldown_secs
                .clone()
                .expect("base_cooldown_secs is not set"),
            reward_divisor: self
                .reward_divisor
                .clone()
                .expect("reward_divisor is not set"),
            max_reward_allowed: self
                .max_reward_allowed
                .clone()
                .expect("max_reward_allowed is not set"),
            max_daily_reward: self
                .max_daily_reward
                .clone()
                .expect("max_daily_reward is not set"),
            base_reward: self.base_reward.clone().expect("base_reward is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `set_params` CPI accounts.
pub struct SetParamsCpiAccounts<'a, 'b> {
    pub config: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `set_params` CPI instruction.
pub struct SetParamsCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub config: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: SetParamsInstructionArgs,
}

impl<'a, 'b> SetParamsCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: SetParamsCpiAccounts<'a, 'b>,
        args: SetParamsInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            config: accounts.config,
            admin: accounts.admin,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(2 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.admin.key,
            true,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&SetParamsInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::POW_MINER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(3 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.config.clone());
        account_infos.push(self.admin.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `SetParams` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` config
///   1. `[signer]` admin
#[derive(Clone, Debug)]
pub struct SetParamsCpiBuilder<'a, 'b> {
    instruction: Box<SetParamsCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> SetParamsCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(SetParamsCpiBuilderInstruction {
            __program: program,
            config: None,
            admin: None,
            min_difficulty: None,
            base_cooldown_secs: None,
            reward_divisor: None,
            max_reward_allowed: None,
            max_daily_reward: None,
            base_reward: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn config(
        &mut self,
        config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.config = Some(config);
        self
    }
    #[inline(always)]
    pub fn admin(&mut self, admin: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.admin = Some(admin);
        self
    }
    #[inline(always)]
    pub fn min_difficulty(&mut self, min_difficulty: u8) -> &mut Self {
        self.instruction.min_difficulty = Some(min_difficulty);
        self
    }
    #[inline(always)]
    pub fn base_cooldown_secs(&mut self, base_cooldown_secs: i64) -> &mut Self {
        self.instruction.base_cooldown_secs = Some(base_cooldown_secs);
        self
    }
    #[inline(always)]
    pub fn reward_divisor(&mut self, reward_divisor: u64) -> &mut Self {
        self.instruction.reward_divisor = Some(reward_divisor);
        self
    }
    #[inline(always)]
    pub fn max_reward_allowed(&mut self, max_reward_allowed: u64) -> &mut Self {
        self.instruction.max_reward_allowed = Some(max_reward_allowed);
        self
    }
    #[inline(always)]
    pub fn max_daily_reward(&mut self, max_daily_reward: u64) -> &mut Self {
        self.instruction.max_daily_reward = Some(max_daily_reward);
        self
    }
    #[inline(always)]
    pub fn base_reward(&mut self, base_reward: u64) -> &mut Self {
        self.instruction.base_reward = Some(base_reward);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = SetParamsInstructionArgs {
            min_difficulty: self
                .instruction
                .min_difficulty
                .clone()
                .expect("min_difficulty is not set"),
            base_cooldown_secs: self
                .instruction
                .base_cooldown_secs
                .clone()
                .expect("base_cooldown_secs is not set"),
            reward_divisor: self
                .instruction
                .reward_divisor
                .clone()
                .expect("reward_divisor is not set"),
            max_reward_allowed: self
                .instruction
                .max_reward_allowed
                .clone()
                .expect("max_reward_allowed is not set"),
            max_daily_reward: self
                .instruction
                .max_daily_reward
                .clone()
                .expect("max_daily_reward is not set"),
            base_reward: self
                .instruction
                .base_reward
                .clone()
                .expect("base_reward is not set"),
        };
        let instruction = SetParamsCpi {
            __program: self.instruction.__program,

            config: self.instruction.config.expect("config is not set"),

            admin: self.instruction.admin.expect("admin is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct SetParamsCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    min_difficulty: Option<u8>,
    base_cooldown_secs: Option<i64>,
    reward_divisor: Option<u64>,
    max_reward_allowed: Option<u64>,
    max_daily_reward: Option<u64>,
    base_reward: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
