/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
} from '@metaplex-foundation/umi/serializers';
import { findProgramStatePda } from '../accounts';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type ExtractFeeInstructionAccounts = {
  user?: PublicKey | Pda;
  master?: PublicKey | Pda;
  masterSigner: Signer;
  recipient: PublicKey | Pda;
  authority?: PublicKey | Pda;
  feeProgram?: PublicKey | Pda;
  programState?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type ExtractFeeInstructionData = {
  discriminator: Uint8Array;
  amount: bigint;
};

export type ExtractFeeInstructionDataArgs = { amount: number | bigint };

export function getExtractFeeInstructionDataSerializer(): Serializer<
  ExtractFeeInstructionDataArgs,
  ExtractFeeInstructionData
> {
  return mapSerializer<
    ExtractFeeInstructionDataArgs,
    any,
    ExtractFeeInstructionData
  >(
    struct<ExtractFeeInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['amount', u64()],
      ],
      { description: 'ExtractFeeInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([163, 228, 222, 41, 50, 218, 177, 34]),
    })
  ) as Serializer<ExtractFeeInstructionDataArgs, ExtractFeeInstructionData>;
}

// Args.
export type ExtractFeeInstructionArgs = ExtractFeeInstructionDataArgs;

// Instruction.
export function extractFee(
  context: Pick<Context, 'eddsa' | 'identity' | 'programs'>,
  input: ExtractFeeInstructionAccounts & ExtractFeeInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'useraccount',
    'KoNT93eGXFcQJxZQqBvrBLQQCcxEPhKrmZoqFNmxGjk'
  );

  // Accounts.
  const resolvedAccounts = {
    user: { index: 0, isWritable: true as boolean, value: input.user ?? null },
    master: {
      index: 1,
      isWritable: true as boolean,
      value: input.master ?? null,
    },
    masterSigner: {
      index: 2,
      isWritable: false as boolean,
      value: input.masterSigner ?? null,
    },
    recipient: {
      index: 3,
      isWritable: true as boolean,
      value: input.recipient ?? null,
    },
    authority: {
      index: 4,
      isWritable: true as boolean,
      value: input.authority ?? null,
    },
    feeProgram: {
      index: 5,
      isWritable: true as boolean,
      value: input.feeProgram ?? null,
    },
    programState: {
      index: 6,
      isWritable: true as boolean,
      value: input.programState ?? null,
    },
    systemProgram: {
      index: 7,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: ExtractFeeInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.authority.value) {
    resolvedAccounts.authority.value = context.identity.publicKey;
  }
  if (!resolvedAccounts.user.value) {
    resolvedAccounts.user.value = context.eddsa.findPda(programId, [
      bytes().serialize(new Uint8Array([117, 115, 101, 114])),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.authority.value)
      ),
    ]);
  }
  if (!resolvedAccounts.master.value) {
    resolvedAccounts.master.value = context.eddsa.findPda(programId, [
      bytes().serialize(new Uint8Array([109, 97, 115, 116, 101, 114])),
    ]);
  }
  if (!resolvedAccounts.feeProgram.value) {
    resolvedAccounts.feeProgram.value = context.eddsa.findPda(programId, [
      bytes().serialize(
        new Uint8Array([102, 101, 101, 95, 112, 114, 111, 103, 114, 97, 109])
      ),
    ]);
  }
  if (!resolvedAccounts.programState.value) {
    resolvedAccounts.programState.value = findProgramStatePda(context);
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'systemProgram',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getExtractFeeInstructionDataSerializer().serialize(
    resolvedArgs as ExtractFeeInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
