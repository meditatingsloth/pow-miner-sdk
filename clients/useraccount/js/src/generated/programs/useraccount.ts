/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedAddLamportsInstruction,
  type ParsedCancelSubscriptionInstruction,
  type ParsedCreateTokenPoolInstruction,
  type ParsedCreateUserInstruction,
  type ParsedDepositToEscrowInstruction,
  type ParsedDepositTokenInstruction,
  type ParsedExtractFeeInstruction,
  type ParsedInitializeInstruction,
  type ParsedInitializeMasterInstruction,
  type ParsedRenewSubscriptionInstruction,
  type ParsedTopUpEscrowInstruction,
  type ParsedUpdateFeeRateInstruction,
  type ParsedUpdateMonthlyPriceInstruction,
  type ParsedUpdateUserInstruction,
  type ParsedWithdrawFeeProgramFundsInstruction,
  type ParsedWithdrawLamportsInstruction,
  type ParsedWithdrawTokenInstruction,
} from '../instructions';

export const USERACCOUNT_PROGRAM_ADDRESS =
  'KoNT93eGXFcQJxZQqBvrBLQQCcxEPhKrmZoqFNmxGjk' as Address<'KoNT93eGXFcQJxZQqBvrBLQQCcxEPhKrmZoqFNmxGjk'>;

export enum UseraccountAccount {
  EscrowAccount,
  MasterAccount,
  ProgramState,
  TokenPool,
  User,
}

export function identifyUseraccountAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): UseraccountAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([36, 69, 48, 18, 128, 225, 125, 135])
      ),
      0
    )
  ) {
    return UseraccountAccount.EscrowAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([30, 179, 10, 149, 99, 235, 125, 34])
      ),
      0
    )
  ) {
    return UseraccountAccount.MasterAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([77, 209, 137, 229, 149, 67, 167, 230])
      ),
      0
    )
  ) {
    return UseraccountAccount.ProgramState;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([103, 51, 150, 210, 226, 131, 104, 33])
      ),
      0
    )
  ) {
    return UseraccountAccount.TokenPool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([159, 117, 95, 227, 239, 151, 58, 236])
      ),
      0
    )
  ) {
    return UseraccountAccount.User;
  }
  throw new Error(
    'The provided account could not be identified as a useraccount account.'
  );
}

export enum UseraccountInstruction {
  AddLamports,
  CancelSubscription,
  CreateTokenPool,
  CreateUser,
  DepositToEscrow,
  DepositToken,
  ExtractFee,
  Initialize,
  InitializeMaster,
  RenewSubscription,
  TopUpEscrow,
  UpdateFeeRate,
  UpdateMonthlyPrice,
  UpdateUser,
  WithdrawFeeProgramFunds,
  WithdrawLamports,
  WithdrawToken,
}

export function identifyUseraccountInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): UseraccountInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([7, 44, 128, 253, 81, 240, 83, 3])
      ),
      0
    )
  ) {
    return UseraccountInstruction.AddLamports;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([60, 139, 189, 242, 191, 208, 143, 18])
      ),
      0
    )
  ) {
    return UseraccountInstruction.CancelSubscription;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([23, 169, 27, 122, 147, 169, 209, 152])
      ),
      0
    )
  ) {
    return UseraccountInstruction.CreateTokenPool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([108, 227, 130, 130, 252, 109, 75, 218])
      ),
      0
    )
  ) {
    return UseraccountInstruction.CreateUser;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([246, 134, 57, 199, 116, 101, 68, 224])
      ),
      0
    )
  ) {
    return UseraccountInstruction.DepositToEscrow;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([11, 156, 96, 218, 39, 163, 180, 19])
      ),
      0
    )
  ) {
    return UseraccountInstruction.DepositToken;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([163, 228, 222, 41, 50, 218, 177, 34])
      ),
      0
    )
  ) {
    return UseraccountInstruction.ExtractFee;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return UseraccountInstruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([206, 91, 246, 30, 216, 101, 134, 166])
      ),
      0
    )
  ) {
    return UseraccountInstruction.InitializeMaster;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([45, 75, 154, 194, 160, 10, 111, 183])
      ),
      0
    )
  ) {
    return UseraccountInstruction.RenewSubscription;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([48, 220, 80, 92, 122, 91, 195, 169])
      ),
      0
    )
  ) {
    return UseraccountInstruction.TopUpEscrow;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([195, 241, 226, 216, 102, 1, 5, 122])
      ),
      0
    )
  ) {
    return UseraccountInstruction.UpdateFeeRate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([208, 197, 8, 227, 250, 154, 252, 129])
      ),
      0
    )
  ) {
    return UseraccountInstruction.UpdateMonthlyPrice;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([9, 2, 160, 169, 118, 12, 207, 84])
      ),
      0
    )
  ) {
    return UseraccountInstruction.UpdateUser;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([165, 147, 189, 246, 132, 25, 74, 194])
      ),
      0
    )
  ) {
    return UseraccountInstruction.WithdrawFeeProgramFunds;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([251, 144, 115, 229, 113, 247, 206, 64])
      ),
      0
    )
  ) {
    return UseraccountInstruction.WithdrawLamports;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([136, 235, 181, 5, 101, 109, 57, 81])
      ),
      0
    )
  ) {
    return UseraccountInstruction.WithdrawToken;
  }
  throw new Error(
    'The provided instruction could not be identified as a useraccount instruction.'
  );
}

export type ParsedUseraccountInstruction<
  TProgram extends string = 'KoNT93eGXFcQJxZQqBvrBLQQCcxEPhKrmZoqFNmxGjk',
> =
  | ({
      instructionType: UseraccountInstruction.AddLamports;
    } & ParsedAddLamportsInstruction<TProgram>)
  | ({
      instructionType: UseraccountInstruction.CancelSubscription;
    } & ParsedCancelSubscriptionInstruction<TProgram>)
  | ({
      instructionType: UseraccountInstruction.CreateTokenPool;
    } & ParsedCreateTokenPoolInstruction<TProgram>)
  | ({
      instructionType: UseraccountInstruction.CreateUser;
    } & ParsedCreateUserInstruction<TProgram>)
  | ({
      instructionType: UseraccountInstruction.DepositToEscrow;
    } & ParsedDepositToEscrowInstruction<TProgram>)
  | ({
      instructionType: UseraccountInstruction.DepositToken;
    } & ParsedDepositTokenInstruction<TProgram>)
  | ({
      instructionType: UseraccountInstruction.ExtractFee;
    } & ParsedExtractFeeInstruction<TProgram>)
  | ({
      instructionType: UseraccountInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: UseraccountInstruction.InitializeMaster;
    } & ParsedInitializeMasterInstruction<TProgram>)
  | ({
      instructionType: UseraccountInstruction.RenewSubscription;
    } & ParsedRenewSubscriptionInstruction<TProgram>)
  | ({
      instructionType: UseraccountInstruction.TopUpEscrow;
    } & ParsedTopUpEscrowInstruction<TProgram>)
  | ({
      instructionType: UseraccountInstruction.UpdateFeeRate;
    } & ParsedUpdateFeeRateInstruction<TProgram>)
  | ({
      instructionType: UseraccountInstruction.UpdateMonthlyPrice;
    } & ParsedUpdateMonthlyPriceInstruction<TProgram>)
  | ({
      instructionType: UseraccountInstruction.UpdateUser;
    } & ParsedUpdateUserInstruction<TProgram>)
  | ({
      instructionType: UseraccountInstruction.WithdrawFeeProgramFunds;
    } & ParsedWithdrawFeeProgramFundsInstruction<TProgram>)
  | ({
      instructionType: UseraccountInstruction.WithdrawLamports;
    } & ParsedWithdrawLamportsInstruction<TProgram>)
  | ({
      instructionType: UseraccountInstruction.WithdrawToken;
    } & ParsedWithdrawTokenInstruction<TProgram>);
