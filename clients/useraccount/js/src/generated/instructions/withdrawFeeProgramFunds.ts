/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { USERACCOUNT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const WITHDRAW_FEE_PROGRAM_FUNDS_DISCRIMINATOR = new Uint8Array([
  165, 147, 189, 246, 132, 25, 74, 194,
]);

export function getWithdrawFeeProgramFundsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAW_FEE_PROGRAM_FUNDS_DISCRIMINATOR
  );
}

export type WithdrawFeeProgramFundsInstruction<
  TProgram extends string = typeof USERACCOUNT_PROGRAM_ADDRESS,
  TAccountMaster extends string | IAccountMeta<string> = string,
  TAccountMasterSigner extends string | IAccountMeta<string> = string,
  TAccountFeeProgram extends string | IAccountMeta<string> = string,
  TAccountRecipient extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountMaster extends string
        ? WritableAccount<TAccountMaster>
        : TAccountMaster,
      TAccountMasterSigner extends string
        ? ReadonlySignerAccount<TAccountMasterSigner> &
            IAccountSignerMeta<TAccountMasterSigner>
        : TAccountMasterSigner,
      TAccountFeeProgram extends string
        ? WritableAccount<TAccountFeeProgram>
        : TAccountFeeProgram,
      TAccountRecipient extends string
        ? WritableAccount<TAccountRecipient>
        : TAccountRecipient,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawFeeProgramFundsInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type WithdrawFeeProgramFundsInstructionDataArgs = {
  amount: number | bigint;
};

export function getWithdrawFeeProgramFundsInstructionDataEncoder(): Encoder<WithdrawFeeProgramFundsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: WITHDRAW_FEE_PROGRAM_FUNDS_DISCRIMINATOR,
    })
  );
}

export function getWithdrawFeeProgramFundsInstructionDataDecoder(): Decoder<WithdrawFeeProgramFundsInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getWithdrawFeeProgramFundsInstructionDataCodec(): Codec<
  WithdrawFeeProgramFundsInstructionDataArgs,
  WithdrawFeeProgramFundsInstructionData
> {
  return combineCodec(
    getWithdrawFeeProgramFundsInstructionDataEncoder(),
    getWithdrawFeeProgramFundsInstructionDataDecoder()
  );
}

export type WithdrawFeeProgramFundsAsyncInput<
  TAccountMaster extends string = string,
  TAccountMasterSigner extends string = string,
  TAccountFeeProgram extends string = string,
  TAccountRecipient extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  master?: Address<TAccountMaster>;
  masterSigner: TransactionSigner<TAccountMasterSigner>;
  feeProgram?: Address<TAccountFeeProgram>;
  recipient: Address<TAccountRecipient>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: WithdrawFeeProgramFundsInstructionDataArgs['amount'];
};

export async function getWithdrawFeeProgramFundsInstructionAsync<
  TAccountMaster extends string,
  TAccountMasterSigner extends string,
  TAccountFeeProgram extends string,
  TAccountRecipient extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof USERACCOUNT_PROGRAM_ADDRESS,
>(
  input: WithdrawFeeProgramFundsAsyncInput<
    TAccountMaster,
    TAccountMasterSigner,
    TAccountFeeProgram,
    TAccountRecipient,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  WithdrawFeeProgramFundsInstruction<
    TProgramAddress,
    TAccountMaster,
    TAccountMasterSigner,
    TAccountFeeProgram,
    TAccountRecipient,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? USERACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    master: { value: input.master ?? null, isWritable: true },
    masterSigner: { value: input.masterSigner ?? null, isWritable: false },
    feeProgram: { value: input.feeProgram ?? null, isWritable: true },
    recipient: { value: input.recipient ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.master.value) {
    accounts.master.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([109, 97, 115, 116, 101, 114])),
      ],
    });
  }
  if (!accounts.feeProgram.value) {
    accounts.feeProgram.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([102, 101, 101, 95, 112, 114, 111, 103, 114, 97, 109])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.master),
      getAccountMeta(accounts.masterSigner),
      getAccountMeta(accounts.feeProgram),
      getAccountMeta(accounts.recipient),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getWithdrawFeeProgramFundsInstructionDataEncoder().encode(
      args as WithdrawFeeProgramFundsInstructionDataArgs
    ),
  } as WithdrawFeeProgramFundsInstruction<
    TProgramAddress,
    TAccountMaster,
    TAccountMasterSigner,
    TAccountFeeProgram,
    TAccountRecipient,
    TAccountSystemProgram
  >;

  return instruction;
}

export type WithdrawFeeProgramFundsInput<
  TAccountMaster extends string = string,
  TAccountMasterSigner extends string = string,
  TAccountFeeProgram extends string = string,
  TAccountRecipient extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  master: Address<TAccountMaster>;
  masterSigner: TransactionSigner<TAccountMasterSigner>;
  feeProgram: Address<TAccountFeeProgram>;
  recipient: Address<TAccountRecipient>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: WithdrawFeeProgramFundsInstructionDataArgs['amount'];
};

export function getWithdrawFeeProgramFundsInstruction<
  TAccountMaster extends string,
  TAccountMasterSigner extends string,
  TAccountFeeProgram extends string,
  TAccountRecipient extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof USERACCOUNT_PROGRAM_ADDRESS,
>(
  input: WithdrawFeeProgramFundsInput<
    TAccountMaster,
    TAccountMasterSigner,
    TAccountFeeProgram,
    TAccountRecipient,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): WithdrawFeeProgramFundsInstruction<
  TProgramAddress,
  TAccountMaster,
  TAccountMasterSigner,
  TAccountFeeProgram,
  TAccountRecipient,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? USERACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    master: { value: input.master ?? null, isWritable: true },
    masterSigner: { value: input.masterSigner ?? null, isWritable: false },
    feeProgram: { value: input.feeProgram ?? null, isWritable: true },
    recipient: { value: input.recipient ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.master),
      getAccountMeta(accounts.masterSigner),
      getAccountMeta(accounts.feeProgram),
      getAccountMeta(accounts.recipient),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getWithdrawFeeProgramFundsInstructionDataEncoder().encode(
      args as WithdrawFeeProgramFundsInstructionDataArgs
    ),
  } as WithdrawFeeProgramFundsInstruction<
    TProgramAddress,
    TAccountMaster,
    TAccountMasterSigner,
    TAccountFeeProgram,
    TAccountRecipient,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedWithdrawFeeProgramFundsInstruction<
  TProgram extends string = typeof USERACCOUNT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    master: TAccountMetas[0];
    masterSigner: TAccountMetas[1];
    feeProgram: TAccountMetas[2];
    recipient: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: WithdrawFeeProgramFundsInstructionData;
};

export function parseWithdrawFeeProgramFundsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedWithdrawFeeProgramFundsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      master: getNextAccount(),
      masterSigner: getNextAccount(),
      feeProgram: getNextAccount(),
      recipient: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getWithdrawFeeProgramFundsInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
