//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum UseraccountError {
    /// 6000 - String too long
    #[error("String too long")]
    StringTooLong = 0x1770,
    /// 6001 - String too short
    #[error("String too short")]
    StringTooShort = 0x1771,
    /// 6002 - Data size exceeded
    #[error("Data size exceeded")]
    DataSizeExceeded = 0x1772,
    /// 6003 - Unauthorized
    #[error("Unauthorized")]
    Unauthorized = 0x1773,
    /// 6004 - Amount too low
    #[error("Amount too low")]
    AmountTooLow = 0x1774,
    /// 6005 - Amount too high
    #[error("Amount too high")]
    AmountTooHigh = 0x1775,
    /// 6006 - Insufficient funds
    #[error("Insufficient funds")]
    InsufficientFunds = 0x1776,
    /// 6007 - Ikke nok lamports for å beholde kontoen rentefritatt. Du må beholde en minimumssaldo.
    #[error(
        "Ikke nok lamports for å beholde kontoen rentefritatt. Du må beholde en minimumssaldo."
    )]
    InsufficientFundsForRent = 0x1777,
    /// 6008 - Brukeren har allerede en aktiv escrow-konto. Kanseller den eksisterende før du oppretter en ny.
    #[error("Brukeren har allerede en aktiv escrow-konto. Kanseller den eksisterende før du oppretter en ny.")]
    EscrowAlreadyExists = 0x1778,
    /// 6009 - Ugyldig master-konto: månedspris må være større enn 0
    #[error("Ugyldig master-konto: månedspris må være større enn 0")]
    InvalidMasterAccount = 0x1779,
    /// 6010 - Ugyldig fee_program konto
    #[error("Ugyldig fee_program konto")]
    InvalidFeeProgramAccount = 0x177A,
}

impl solana_program::program_error::PrintProgramError for UseraccountError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}

impl<T> solana_program::decode_error::DecodeError<T> for UseraccountError {
    fn type_of() -> &'static str {
        "UseraccountError"
    }
}
