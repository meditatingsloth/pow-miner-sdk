/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const MASTER_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  30, 179, 10, 149, 99, 235, 125, 34,
]);

export function getMasterAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    MASTER_ACCOUNT_DISCRIMINATOR
  );
}

export type MasterAccount = {
  discriminator: ReadonlyUint8Array;
  authority: Address;
  feeRate: number;
  minFee: bigint;
  maxFee: bigint;
  monthlyPrice: bigint;
};

export type MasterAccountArgs = {
  authority: Address;
  feeRate: number;
  minFee: number | bigint;
  maxFee: number | bigint;
  monthlyPrice: number | bigint;
};

export function getMasterAccountEncoder(): Encoder<MasterAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['authority', getAddressEncoder()],
      ['feeRate', getU8Encoder()],
      ['minFee', getU64Encoder()],
      ['maxFee', getU64Encoder()],
      ['monthlyPrice', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: MASTER_ACCOUNT_DISCRIMINATOR })
  );
}

export function getMasterAccountDecoder(): Decoder<MasterAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['authority', getAddressDecoder()],
    ['feeRate', getU8Decoder()],
    ['minFee', getU64Decoder()],
    ['maxFee', getU64Decoder()],
    ['monthlyPrice', getU64Decoder()],
  ]);
}

export function getMasterAccountCodec(): Codec<
  MasterAccountArgs,
  MasterAccount
> {
  return combineCodec(getMasterAccountEncoder(), getMasterAccountDecoder());
}

export function decodeMasterAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<MasterAccount, TAddress>;
export function decodeMasterAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<MasterAccount, TAddress>;
export function decodeMasterAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<MasterAccount, TAddress> | MaybeAccount<MasterAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMasterAccountDecoder()
  );
}

export async function fetchMasterAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<MasterAccount, TAddress>> {
  const maybeAccount = await fetchMaybeMasterAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMasterAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<MasterAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMasterAccount(maybeAccount);
}

export async function fetchAllMasterAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<MasterAccount>[]> {
  const maybeAccounts = await fetchAllMaybeMasterAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMasterAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<MasterAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeMasterAccount(maybeAccount));
}

export function getMasterAccountSize(): number {
  return 65;
}
