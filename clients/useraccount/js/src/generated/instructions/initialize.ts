/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { findProgramStatePda } from '../pdas';
import { USERACCOUNT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_DISCRIMINATOR = new Uint8Array([
  175, 175, 109, 31, 13, 152, 155, 237,
]);

export function getInitializeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(INITIALIZE_DISCRIMINATOR);
}

export type InitializeInstruction<
  TProgram extends string = typeof USERACCOUNT_PROGRAM_ADDRESS,
  TAccountProgramState extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountFeeProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountProgramState extends string
        ? WritableAccount<TAccountProgramState>
        : TAccountProgramState,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountFeeProgram extends string
        ? WritableAccount<TAccountFeeProgram>
        : TAccountFeeProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeInstructionData = { discriminator: ReadonlyUint8Array };

export type InitializeInstructionDataArgs = {};

export function getInitializeInstructionDataEncoder(): Encoder<InitializeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: INITIALIZE_DISCRIMINATOR })
  );
}

export function getInitializeInstructionDataDecoder(): Decoder<InitializeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitializeInstructionDataCodec(): Codec<
  InitializeInstructionDataArgs,
  InitializeInstructionData
> {
  return combineCodec(
    getInitializeInstructionDataEncoder(),
    getInitializeInstructionDataDecoder()
  );
}

export type InitializeAsyncInput<
  TAccountProgramState extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountFeeProgram extends string = string,
> = {
  programState?: Address<TAccountProgramState>;
  authority: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  feeProgram?: Address<TAccountFeeProgram>;
};

export async function getInitializeInstructionAsync<
  TAccountProgramState extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TAccountFeeProgram extends string,
  TProgramAddress extends Address = typeof USERACCOUNT_PROGRAM_ADDRESS,
>(
  input: InitializeAsyncInput<
    TAccountProgramState,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountFeeProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeInstruction<
    TProgramAddress,
    TAccountProgramState,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountFeeProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? USERACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    programState: { value: input.programState ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    feeProgram: { value: input.feeProgram ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.programState.value) {
    accounts.programState.value = await findProgramStatePda();
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.feeProgram.value) {
    accounts.feeProgram.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([102, 101, 101, 95, 112, 114, 111, 103, 114, 97, 109])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.programState),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.feeProgram),
    ],
    programAddress,
    data: getInitializeInstructionDataEncoder().encode({}),
  } as InitializeInstruction<
    TProgramAddress,
    TAccountProgramState,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountFeeProgram
  >;

  return instruction;
}

export type InitializeInput<
  TAccountProgramState extends string = string,
  TAccountAuthority extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountFeeProgram extends string = string,
> = {
  programState: Address<TAccountProgramState>;
  authority: TransactionSigner<TAccountAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
  feeProgram: Address<TAccountFeeProgram>;
};

export function getInitializeInstruction<
  TAccountProgramState extends string,
  TAccountAuthority extends string,
  TAccountSystemProgram extends string,
  TAccountFeeProgram extends string,
  TProgramAddress extends Address = typeof USERACCOUNT_PROGRAM_ADDRESS,
>(
  input: InitializeInput<
    TAccountProgramState,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountFeeProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeInstruction<
  TProgramAddress,
  TAccountProgramState,
  TAccountAuthority,
  TAccountSystemProgram,
  TAccountFeeProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? USERACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    programState: { value: input.programState ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    feeProgram: { value: input.feeProgram ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.programState),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.feeProgram),
    ],
    programAddress,
    data: getInitializeInstructionDataEncoder().encode({}),
  } as InitializeInstruction<
    TProgramAddress,
    TAccountProgramState,
    TAccountAuthority,
    TAccountSystemProgram,
    TAccountFeeProgram
  >;

  return instruction;
}

export type ParsedInitializeInstruction<
  TProgram extends string = typeof USERACCOUNT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    programState: TAccountMetas[0];
    authority: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
    feeProgram: TAccountMetas[3];
  };
  data: InitializeInstructionData;
};

export function parseInitializeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      programState: getNextAccount(),
      authority: getNextAccount(),
      systemProgram: getNextAccount(),
      feeProgram: getNextAccount(),
    },
    data: getInitializeInstructionDataDecoder().decode(instruction.data),
  };
}
