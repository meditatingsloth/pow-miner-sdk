/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { POW_MINER_PROGRAM_ADDRESS } from '../programs';

/** InvalidHash: Submitted hash does not match expected hash */
export const POW_MINER_ERROR__INVALID_HASH = 0x1770; // 6000
/** TooEasy: Hash difficulty too low */
export const POW_MINER_ERROR__TOO_EASY = 0x1771; // 6001
/** RewardOverflow: Reward shift overflowed u64 */
export const POW_MINER_ERROR__REWARD_OVERFLOW = 0x1772; // 6002
/** Unauthorized: Caller is not admin */
export const POW_MINER_ERROR__UNAUTHORIZED = 0x1773; // 6003
/** ConfigAlreadyInitialized: Config account already initialized */
export const POW_MINER_ERROR__CONFIG_ALREADY_INITIALIZED = 0x1774; // 6004
/** ConfigNotInitialized: Config account not initialized */
export const POW_MINER_ERROR__CONFIG_NOT_INITIALIZED = 0x1775; // 6005
/** ProofNotInitialized: Proof account not initialized */
export const POW_MINER_ERROR__PROOF_NOT_INITIALIZED = 0x1776; // 6006
/** InvalidMint: Invalid mint */
export const POW_MINER_ERROR__INVALID_MINT = 0x1777; // 6007
/** InvalidChallenge: Invalid challenge */
export const POW_MINER_ERROR__INVALID_CHALLENGE = 0x1778; // 6008
/** FutureSlot: Provided slot is in the future */
export const POW_MINER_ERROR__FUTURE_SLOT = 0x1779; // 6009
/** SlotBeforeProof: Provided slot is before proof was initialized */
export const POW_MINER_ERROR__SLOT_BEFORE_PROOF = 0x177a; // 6010
/** NothingToClaim: Nothing to claim */
export const POW_MINER_ERROR__NOTHING_TO_CLAIM = 0x177b; // 6011
/** InvalidBump: Invalid bump */
export const POW_MINER_ERROR__INVALID_BUMP = 0x177c; // 6012
/** CapHit: Cap hit */
export const POW_MINER_ERROR__CAP_HIT = 0x177d; // 6013
/** InsufficientLamports: Insufficient lamports */
export const POW_MINER_ERROR__INSUFFICIENT_LAMPORTS = 0x177e; // 6014
/** MinCooldown: Please wait before mining again. */
export const POW_MINER_ERROR__MIN_COOLDOWN = 0x177f; // 6015
/** RewardTooHigh: Reward too high */
export const POW_MINER_ERROR__REWARD_TOO_HIGH = 0x1780; // 6016
/** WrongSlot: Wrong slot */
export const POW_MINER_ERROR__WRONG_SLOT = 0x1781; // 6017
/** OverdeliveryNotAllowed: Overdelivery not allowed */
export const POW_MINER_ERROR__OVERDELIVERY_NOT_ALLOWED = 0x1782; // 6018
/** DailyCap: Daily cap hit */
export const POW_MINER_ERROR__DAILY_CAP = 0x1783; // 6019
/** InvalidUserAccount: Invalid user account */
export const POW_MINER_ERROR__INVALID_USER_ACCOUNT = 0x1784; // 6020
/** InvalidUserAccountOwner: Invalid user account owner */
export const POW_MINER_ERROR__INVALID_USER_ACCOUNT_OWNER = 0x1785; // 6021

export type PowMinerError =
  | typeof POW_MINER_ERROR__CAP_HIT
  | typeof POW_MINER_ERROR__CONFIG_ALREADY_INITIALIZED
  | typeof POW_MINER_ERROR__CONFIG_NOT_INITIALIZED
  | typeof POW_MINER_ERROR__DAILY_CAP
  | typeof POW_MINER_ERROR__FUTURE_SLOT
  | typeof POW_MINER_ERROR__INSUFFICIENT_LAMPORTS
  | typeof POW_MINER_ERROR__INVALID_BUMP
  | typeof POW_MINER_ERROR__INVALID_CHALLENGE
  | typeof POW_MINER_ERROR__INVALID_HASH
  | typeof POW_MINER_ERROR__INVALID_MINT
  | typeof POW_MINER_ERROR__INVALID_USER_ACCOUNT
  | typeof POW_MINER_ERROR__INVALID_USER_ACCOUNT_OWNER
  | typeof POW_MINER_ERROR__MIN_COOLDOWN
  | typeof POW_MINER_ERROR__NOTHING_TO_CLAIM
  | typeof POW_MINER_ERROR__OVERDELIVERY_NOT_ALLOWED
  | typeof POW_MINER_ERROR__PROOF_NOT_INITIALIZED
  | typeof POW_MINER_ERROR__REWARD_OVERFLOW
  | typeof POW_MINER_ERROR__REWARD_TOO_HIGH
  | typeof POW_MINER_ERROR__SLOT_BEFORE_PROOF
  | typeof POW_MINER_ERROR__TOO_EASY
  | typeof POW_MINER_ERROR__UNAUTHORIZED
  | typeof POW_MINER_ERROR__WRONG_SLOT;

let powMinerErrorMessages: Record<PowMinerError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  powMinerErrorMessages = {
    [POW_MINER_ERROR__CAP_HIT]: `Cap hit`,
    [POW_MINER_ERROR__CONFIG_ALREADY_INITIALIZED]: `Config account already initialized`,
    [POW_MINER_ERROR__CONFIG_NOT_INITIALIZED]: `Config account not initialized`,
    [POW_MINER_ERROR__DAILY_CAP]: `Daily cap hit`,
    [POW_MINER_ERROR__FUTURE_SLOT]: `Provided slot is in the future`,
    [POW_MINER_ERROR__INSUFFICIENT_LAMPORTS]: `Insufficient lamports`,
    [POW_MINER_ERROR__INVALID_BUMP]: `Invalid bump`,
    [POW_MINER_ERROR__INVALID_CHALLENGE]: `Invalid challenge`,
    [POW_MINER_ERROR__INVALID_HASH]: `Submitted hash does not match expected hash`,
    [POW_MINER_ERROR__INVALID_MINT]: `Invalid mint`,
    [POW_MINER_ERROR__INVALID_USER_ACCOUNT]: `Invalid user account`,
    [POW_MINER_ERROR__INVALID_USER_ACCOUNT_OWNER]: `Invalid user account owner`,
    [POW_MINER_ERROR__MIN_COOLDOWN]: `Please wait before mining again.`,
    [POW_MINER_ERROR__NOTHING_TO_CLAIM]: `Nothing to claim`,
    [POW_MINER_ERROR__OVERDELIVERY_NOT_ALLOWED]: `Overdelivery not allowed`,
    [POW_MINER_ERROR__PROOF_NOT_INITIALIZED]: `Proof account not initialized`,
    [POW_MINER_ERROR__REWARD_OVERFLOW]: `Reward shift overflowed u64`,
    [POW_MINER_ERROR__REWARD_TOO_HIGH]: `Reward too high`,
    [POW_MINER_ERROR__SLOT_BEFORE_PROOF]: `Provided slot is before proof was initialized`,
    [POW_MINER_ERROR__TOO_EASY]: `Hash difficulty too low`,
    [POW_MINER_ERROR__UNAUTHORIZED]: `Caller is not admin`,
    [POW_MINER_ERROR__WRONG_SLOT]: `Wrong slot`,
  };
}

export function getPowMinerErrorMessage(code: PowMinerError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (powMinerErrorMessages as Record<PowMinerError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isPowMinerError<TProgramErrorCode extends PowMinerError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    POW_MINER_PROGRAM_ADDRESS,
    code
  );
}
