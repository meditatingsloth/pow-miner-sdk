//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum PowMinerError {
    /// 6000 - Submitted hash does not match expected hash
    #[error("Submitted hash does not match expected hash")]
    InvalidHash = 0x1770,
    /// 6001 - Hash difficulty too low
    #[error("Hash difficulty too low")]
    TooEasy = 0x1771,
    /// 6002 - Reward shift overflowed u64
    #[error("Reward shift overflowed u64")]
    RewardOverflow = 0x1772,
    /// 6003 - Caller is not admin
    #[error("Caller is not admin")]
    Unauthorized = 0x1773,
    /// 6004 - Config account already initialized
    #[error("Config account already initialized")]
    ConfigAlreadyInitialized = 0x1774,
    /// 6005 - Config account not initialized
    #[error("Config account not initialized")]
    ConfigNotInitialized = 0x1775,
    /// 6006 - Proof account not initialized
    #[error("Proof account not initialized")]
    ProofNotInitialized = 0x1776,
    /// 6007 - Invalid mint
    #[error("Invalid mint")]
    InvalidMint = 0x1777,
    /// 6008 - Invalid challenge
    #[error("Invalid challenge")]
    InvalidChallenge = 0x1778,
    /// 6009 - Provided slot is in the future
    #[error("Provided slot is in the future")]
    FutureSlot = 0x1779,
    /// 6010 - Provided slot is before proof was initialized
    #[error("Provided slot is before proof was initialized")]
    SlotBeforeProof = 0x177A,
    /// 6011 - Nothing to claim
    #[error("Nothing to claim")]
    NothingToClaim = 0x177B,
    /// 6012 - Invalid bump
    #[error("Invalid bump")]
    InvalidBump = 0x177C,
    /// 6013 - Cap hit
    #[error("Cap hit")]
    CapHit = 0x177D,
    /// 6014 - Insufficient lamports
    #[error("Insufficient lamports")]
    InsufficientLamports = 0x177E,
    /// 6015 - Please wait before mining again.
    #[error("Please wait before mining again.")]
    MinCooldown = 0x177F,
    /// 6016 - Reward too high
    #[error("Reward too high")]
    RewardTooHigh = 0x1780,
    /// 6017 - Wrong slot
    #[error("Wrong slot")]
    WrongSlot = 0x1781,
    /// 6018 - Overdelivery not allowed
    #[error("Overdelivery not allowed")]
    OverdeliveryNotAllowed = 0x1782,
    /// 6019 - Daily cap hit
    #[error("Daily cap hit")]
    DailyCap = 0x1783,
    /// 6020 - Invalid user account
    #[error("Invalid user account")]
    InvalidUserAccount = 0x1784,
    /// 6021 - Invalid user account owner
    #[error("Invalid user account owner")]
    InvalidUserAccountOwner = 0x1785,
}

impl solana_program::program_error::PrintProgramError for PowMinerError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}

impl<T> solana_program::decode_error::DecodeError<T> for PowMinerError {
    fn type_of() -> &'static str {
        "PowMinerError"
    }
}
