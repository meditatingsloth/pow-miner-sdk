/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { USERACCOUNT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UPDATE_FEE_RATE_DISCRIMINATOR = new Uint8Array([
  195, 241, 226, 216, 102, 1, 5, 122,
]);

export function getUpdateFeeRateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_FEE_RATE_DISCRIMINATOR
  );
}

export type UpdateFeeRateInstruction<
  TProgram extends string = typeof USERACCOUNT_PROGRAM_ADDRESS,
  TAccountMaster extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountMaster extends string
        ? WritableAccount<TAccountMaster>
        : TAccountMaster,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateFeeRateInstructionData = {
  discriminator: ReadonlyUint8Array;
  newFeeRate: number;
};

export type UpdateFeeRateInstructionDataArgs = { newFeeRate: number };

export function getUpdateFeeRateInstructionDataEncoder(): Encoder<UpdateFeeRateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['newFeeRate', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: UPDATE_FEE_RATE_DISCRIMINATOR })
  );
}

export function getUpdateFeeRateInstructionDataDecoder(): Decoder<UpdateFeeRateInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['newFeeRate', getU8Decoder()],
  ]);
}

export function getUpdateFeeRateInstructionDataCodec(): Codec<
  UpdateFeeRateInstructionDataArgs,
  UpdateFeeRateInstructionData
> {
  return combineCodec(
    getUpdateFeeRateInstructionDataEncoder(),
    getUpdateFeeRateInstructionDataDecoder()
  );
}

export type UpdateFeeRateAsyncInput<
  TAccountMaster extends string = string,
  TAccountAuthority extends string = string,
> = {
  master?: Address<TAccountMaster>;
  authority: TransactionSigner<TAccountAuthority>;
  newFeeRate: UpdateFeeRateInstructionDataArgs['newFeeRate'];
};

export async function getUpdateFeeRateInstructionAsync<
  TAccountMaster extends string,
  TAccountAuthority extends string,
  TProgramAddress extends Address = typeof USERACCOUNT_PROGRAM_ADDRESS,
>(
  input: UpdateFeeRateAsyncInput<TAccountMaster, TAccountAuthority>,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UpdateFeeRateInstruction<TProgramAddress, TAccountMaster, TAccountAuthority>
> {
  // Program address.
  const programAddress = config?.programAddress ?? USERACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    master: { value: input.master ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.master.value) {
    accounts.master.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([109, 97, 115, 116, 101, 114])),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.master),
      getAccountMeta(accounts.authority),
    ],
    programAddress,
    data: getUpdateFeeRateInstructionDataEncoder().encode(
      args as UpdateFeeRateInstructionDataArgs
    ),
  } as UpdateFeeRateInstruction<
    TProgramAddress,
    TAccountMaster,
    TAccountAuthority
  >;

  return instruction;
}

export type UpdateFeeRateInput<
  TAccountMaster extends string = string,
  TAccountAuthority extends string = string,
> = {
  master: Address<TAccountMaster>;
  authority: TransactionSigner<TAccountAuthority>;
  newFeeRate: UpdateFeeRateInstructionDataArgs['newFeeRate'];
};

export function getUpdateFeeRateInstruction<
  TAccountMaster extends string,
  TAccountAuthority extends string,
  TProgramAddress extends Address = typeof USERACCOUNT_PROGRAM_ADDRESS,
>(
  input: UpdateFeeRateInput<TAccountMaster, TAccountAuthority>,
  config?: { programAddress?: TProgramAddress }
): UpdateFeeRateInstruction<
  TProgramAddress,
  TAccountMaster,
  TAccountAuthority
> {
  // Program address.
  const programAddress = config?.programAddress ?? USERACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    master: { value: input.master ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.master),
      getAccountMeta(accounts.authority),
    ],
    programAddress,
    data: getUpdateFeeRateInstructionDataEncoder().encode(
      args as UpdateFeeRateInstructionDataArgs
    ),
  } as UpdateFeeRateInstruction<
    TProgramAddress,
    TAccountMaster,
    TAccountAuthority
  >;

  return instruction;
}

export type ParsedUpdateFeeRateInstruction<
  TProgram extends string = typeof USERACCOUNT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    master: TAccountMetas[0];
    authority: TAccountMetas[1];
  };
  data: UpdateFeeRateInstructionData;
};

export function parseUpdateFeeRateInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUpdateFeeRateInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      master: getNextAccount(),
      authority: getNextAccount(),
    },
    data: getUpdateFeeRateInstructionDataDecoder().decode(instruction.data),
  };
}
