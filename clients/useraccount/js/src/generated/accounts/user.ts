/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { UserSeeds, findUserPda } from '../pdas';

export const USER_DISCRIMINATOR = new Uint8Array([
  159, 117, 95, 227, 239, 151, 58, 236,
]);

export function getUserDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(USER_DISCRIMINATOR);
}

export type User = {
  discriminator: ReadonlyUint8Array;
  createdAt: bigint;
  lastUpdated: bigint;
  name: ReadonlyUint8Array;
  description: ReadonlyUint8Array;
  tokenCount: number;
  authority: Address;
  escrow: Option<Address>;
};

export type UserArgs = {
  createdAt: number | bigint;
  lastUpdated: number | bigint;
  name: ReadonlyUint8Array;
  description: ReadonlyUint8Array;
  tokenCount: number;
  authority: Address;
  escrow: OptionOrNullable<Address>;
};

export function getUserEncoder(): Encoder<UserArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['createdAt', getI64Encoder()],
      ['lastUpdated', getI64Encoder()],
      ['name', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
      ['description', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
      ['tokenCount', getU8Encoder()],
      ['authority', getAddressEncoder()],
      ['escrow', getOptionEncoder(getAddressEncoder())],
    ]),
    (value) => ({ ...value, discriminator: USER_DISCRIMINATOR })
  );
}

export function getUserDecoder(): Decoder<User> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['createdAt', getI64Decoder()],
    ['lastUpdated', getI64Decoder()],
    ['name', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
    ['description', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
    ['tokenCount', getU8Decoder()],
    ['authority', getAddressDecoder()],
    ['escrow', getOptionDecoder(getAddressDecoder())],
  ]);
}

export function getUserCodec(): Codec<UserArgs, User> {
  return combineCodec(getUserEncoder(), getUserDecoder());
}

export function decodeUser<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<User, TAddress>;
export function decodeUser<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<User, TAddress>;
export function decodeUser<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<User, TAddress> | MaybeAccount<User, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getUserDecoder()
  );
}

export async function fetchUser<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<User, TAddress>> {
  const maybeAccount = await fetchMaybeUser(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeUser<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<User, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeUser(maybeAccount);
}

export async function fetchAllUser(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<User>[]> {
  const maybeAccounts = await fetchAllMaybeUser(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeUser(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<User>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeUser(maybeAccount));
}

export async function fetchUserFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: UserSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<User>> {
  const maybeAccount = await fetchMaybeUserFromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeUserFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: UserSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<User>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findUserPda(seeds, { programAddress });
  return await fetchMaybeUser(rpc, address, fetchConfig);
}
