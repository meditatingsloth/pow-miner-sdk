/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { findProgramStatePda } from '../pdas';

export const PROGRAM_STATE_DISCRIMINATOR = new Uint8Array([
  77, 209, 137, 229, 149, 67, 167, 230,
]);

export function getProgramStateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PROGRAM_STATE_DISCRIMINATOR
  );
}

export type ProgramState = {
  discriminator: ReadonlyUint8Array;
  nextUserId: number;
  totalSubscriptions: number;
  totalEscrowBalance: bigint;
  totalFeesCollected: bigint;
  totalRecipientFees: bigint;
};

export type ProgramStateArgs = {
  nextUserId: number;
  totalSubscriptions: number;
  totalEscrowBalance: number | bigint;
  totalFeesCollected: number | bigint;
  totalRecipientFees: number | bigint;
};

export function getProgramStateEncoder(): Encoder<ProgramStateArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['nextUserId', getU32Encoder()],
      ['totalSubscriptions', getU32Encoder()],
      ['totalEscrowBalance', getU64Encoder()],
      ['totalFeesCollected', getU64Encoder()],
      ['totalRecipientFees', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: PROGRAM_STATE_DISCRIMINATOR })
  );
}

export function getProgramStateDecoder(): Decoder<ProgramState> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['nextUserId', getU32Decoder()],
    ['totalSubscriptions', getU32Decoder()],
    ['totalEscrowBalance', getU64Decoder()],
    ['totalFeesCollected', getU64Decoder()],
    ['totalRecipientFees', getU64Decoder()],
  ]);
}

export function getProgramStateCodec(): Codec<ProgramStateArgs, ProgramState> {
  return combineCodec(getProgramStateEncoder(), getProgramStateDecoder());
}

export function decodeProgramState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ProgramState, TAddress>;
export function decodeProgramState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ProgramState, TAddress>;
export function decodeProgramState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<ProgramState, TAddress> | MaybeAccount<ProgramState, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getProgramStateDecoder()
  );
}

export async function fetchProgramState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ProgramState, TAddress>> {
  const maybeAccount = await fetchMaybeProgramState(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeProgramState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ProgramState, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeProgramState(maybeAccount);
}

export async function fetchAllProgramState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ProgramState>[]> {
  const maybeAccounts = await fetchAllMaybeProgramState(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeProgramState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ProgramState>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeProgramState(maybeAccount));
}

export function getProgramStateSize(): number {
  return 40;
}

export async function fetchProgramStateFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<ProgramState>> {
  const maybeAccount = await fetchMaybeProgramStateFromSeeds(rpc, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeProgramStateFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<ProgramState>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findProgramStatePda({ programAddress });
  return await fetchMaybeProgramState(rpc, address, fetchConfig);
}
