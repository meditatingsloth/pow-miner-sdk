/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type DepositTokenInstructionAccounts = {
  user?: PublicKey | Pda;
  tokenPool?: PublicKey | Pda;
  mint: PublicKey | Pda;
  tokenAccount: PublicKey | Pda;
  userTokenAccount: PublicKey | Pda;
  authority?: Signer;
  tokenProgram?: PublicKey | Pda;
};

// Data.
export type DepositTokenInstructionData = {
  discriminator: Uint8Array;
  amount: bigint;
};

export type DepositTokenInstructionDataArgs = { amount: number | bigint };

export function getDepositTokenInstructionDataSerializer(): Serializer<
  DepositTokenInstructionDataArgs,
  DepositTokenInstructionData
> {
  return mapSerializer<
    DepositTokenInstructionDataArgs,
    any,
    DepositTokenInstructionData
  >(
    struct<DepositTokenInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['amount', u64()],
      ],
      { description: 'DepositTokenInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([11, 156, 96, 218, 39, 163, 180, 19]),
    })
  ) as Serializer<DepositTokenInstructionDataArgs, DepositTokenInstructionData>;
}

// Args.
export type DepositTokenInstructionArgs = DepositTokenInstructionDataArgs;

// Instruction.
export function depositToken(
  context: Pick<Context, 'eddsa' | 'identity' | 'programs'>,
  input: DepositTokenInstructionAccounts & DepositTokenInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'useraccount',
    'KoNT93eGXFcQJxZQqBvrBLQQCcxEPhKrmZoqFNmxGjk'
  );

  // Accounts.
  const resolvedAccounts = {
    user: { index: 0, isWritable: false as boolean, value: input.user ?? null },
    tokenPool: {
      index: 1,
      isWritable: true as boolean,
      value: input.tokenPool ?? null,
    },
    mint: { index: 2, isWritable: false as boolean, value: input.mint ?? null },
    tokenAccount: {
      index: 3,
      isWritable: true as boolean,
      value: input.tokenAccount ?? null,
    },
    userTokenAccount: {
      index: 4,
      isWritable: true as boolean,
      value: input.userTokenAccount ?? null,
    },
    authority: {
      index: 5,
      isWritable: true as boolean,
      value: input.authority ?? null,
    },
    tokenProgram: {
      index: 6,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: DepositTokenInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.authority.value) {
    resolvedAccounts.authority.value = context.identity;
  }
  if (!resolvedAccounts.user.value) {
    resolvedAccounts.user.value = context.eddsa.findPda(programId, [
      bytes().serialize(new Uint8Array([117, 115, 101, 114])),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.authority.value)
      ),
    ]);
  }
  if (!resolvedAccounts.tokenPool.value) {
    resolvedAccounts.tokenPool.value = context.eddsa.findPda(programId, [
      bytes().serialize(
        new Uint8Array([116, 111, 107, 101, 110, 95, 112, 111, 111, 108])
      ),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.user.value)
      ),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.mint.value)
      ),
    ]);
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'tokenProgram',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getDepositTokenInstructionDataSerializer().serialize(
    resolvedArgs as DepositTokenInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
